Developers Instructions
***********************

  This file explain how X-Kaapi's build system works, header dependencies and how
you can simply add files to the compilation process.

I. CMake :
==========

  This project uses CMake (http://www.cmake.org). CMake is a cross-platform
build system generator. Projects specify their build process with platform
independent CMake listfiles included in each directory of a source tree with
the name CMakeLists.txt. Users build a project by using CMake to generate a
build system for a native tool on their platform.

  The CMakeLists.txt files in this project are well documented, you should take
a look if you intend to modify this build system. Documentation can be found on
CMake website or mailing list.

  The build system is created by calling the cmake command with the source
directory as argument (out-of-source build is recommended).

II. Header dependencies :
=========================

a) Generated headers :
----------------------

  We have currently 3 header files generated by the build system in a specific
order :
  - kaapi_config.h : contains every system specific constant (in order to have a
      portable library).
  - kaapi.h : contains every function definition, it's the public interface for
      the library.
  - kaapi_type.h : contains every opaque public types and their size.

b) Other headers :
------------------

  There are two other important headers which are not generated :
  - kaapi_impl.h : this header shall be included in every source file from the
      library.
  - kaapi_private_structure.h : every private structures which will be an
      opaque public type should be defined in here.


  Here is a dot graph with the main headers (green files will be processed
during the build system creation, red arrows represent include dependencies) :

digraph dependencies{
  label = "Headers dependencies";
  node [shape = box];
  "kaapi.h.in" [style=filled, fillcolor="chartreuse"];
  "kaapi_type.h.in" [style=filled, fillcolor="chartreuse"];
  "kaapi_config.h.in" [style=filled, fillcolor="chartreuse"];
  "kaapi.h.in" -> "kaapi.h" [label = "2"];
  "kaapi_config.h.in" -> "kaapi_config.h" [label = "1"];
  "kaapi_type.h.in" -> "kaapi_type.h" [label = "3"];
  "kaapi.h" -> "kaapi_type.h" [color=red];
  "kaapi_impl.h" -> "kaapi_config.h" [color=red];
  "kaapi_impl.h" -> "kaapi_private_structure.h" [color=red];
  "kaapi_impl.h" -> "kaapi.h" [color=red];
}


  During the build system creation, source files in "config" directory are
compiled and executed in order to retrieve some constant before generating
headers. For example, the source file "check_pthread_stack_min.c" simply
prints the value of the PTHREAD_STACK_MIN constant and CMake stores it in
${KAAPI_STACK_MIN} which will then be replaced in every generated headers it
appears in (kaapi.h in this case).

  The order of generation is important because each step uses previous step's
results. For example, in kaapi_type.h.in, the generation step replace some
CMake variables (ie. ${KAAPI_SIZEOF_MUTEX_T}) with their real value. The real
value can be retrieved using CMake "check_type_size" command, looking into
kaapi_private_structure.h (which is the place for private opaque types). This
header include kaapi_config.h to define system dependant types and it also
includes kaapi_impl.h which includes kaapi.h in order to have function
definitions and other types usefull in private part. Therefor kaapi_config.h
and kaapi.h must be generated before kaapi_type.h.

III. Adding files to the build system :
=======================================

  If you wish to contribute to this project, you'll have to modify the build
system in order to take into account your modifications. You'll have to change
one of the CMakeLists.txt, depending on what you're adding :

a) Adding files to the library :
--------------------------------

  In this case, the file you'll have to modify is 'src/CMakeLists.txt'. You'll
just need to add your .c files in the library target (both static and dynamic)
which means add your file to the "add_library (kaapi SHARED ..." and
"add_library (kaapi-static STATIC ...)" command.

  Then you may need to have some steps done during the build system creation
(cmake command), I recommend you have a look at what we currently do during this
step so you can figure how to do some basic tricks. If you need more precise
things, please refer to the CMake website or mailing list.

b) Adding test files :
----------------------

  If you wish to add some extra tests in the 'tests' directory, you'll just have
to add two lines in its CMakeLists.txt :
* add_executable (exec_name source_name.c)
* target_link_libraries (exec_name libraries)

  Currently, the X-Kaapi library is available in this file by using
"${XKAAPI_TEST_LINK_LIBS}", if your test uses other libraries, simply add them
after X-Kaapi.

IV. Adding types to the library :
=================================

a) Adding private types :
-------------------------

  If you wish to add some private types to the library, you should put their
definition in kaapi_impl.h.

b) Adding public types :
------------------------

  Current public opaque types are kaapi_mutexattr_t, kaapi_mutex_t,
kaapi_condattr_t, kaapi_cond_t, kaapi_attr_t and kaapi_once_t. These types have
two definitions, a private one, stored in kaapi_private_structure.h, including
every typed fields of the structure, and a public one, stored in kaapi_type.h,
which is opaque.

  This public structure is just an array of characters. The only constraint on
this opaque structure is the size. In order to have the same size as the "real"
private structure, we use the build system to define a constant to the size of
the private structure. This constant is retrieved using "check_type_size
("kaapi_newtype_t" KAAPI_SIZEOF_NEWTYPE_T)". Then, in kaapi_type.h.in, we can
declare a structure like this :

  #define KAAPI_SIZEOF_MUTEX_T ${KAAPI_SIZEOF_MUTEX_T}
  typedef struct kaapi_mutex_t {
    char _opaque[ KAAPI_SIZEOF_MUTEX_T ]; 
  } kaapi_mutex_t;
  
  
V. Adding functions to the library :
====================================

b) Adding private functions :
-----------------------------

  If you intend to add some private functions to the library, you should put
their definition into kaapi_impl.h, create a new C file and include kaapi_impl.h
into it.

a) Adding public functions:
---------------------------

  If you want to add some public functions to the library, please put their
definition into kaapi.h.in, create a new C file (kaapi_function_name.c for
instance) and simply include kaapi_impl.h in your C file (don't forget to add
this new file into the build system like explained above).
