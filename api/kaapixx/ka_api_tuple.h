/* KAAPI/Kaapi++ public interface */
// KAAPI library source
// -----------------------------------------
// by Thierry Gautier
//(c) INRIA, projet MOAIS, 2006-2010
//
// **********************************************************
// WARNING! This file has been automatically generated by M4
// mardi 5 octobre 2010, 08:48:40 (UTC+0200)
// *********************************************************















// --------------------------------------------------------------------
// View for task arguments description
template<
  typename M1, typename M2, typename M3, typename M4, typename M5, typename M6, typename M7, typename M8, typename M9, typename M10
> struct CountTuple {
  enum { count = 10 };
};


template<
  typename S1, typename S2, typename S3, typename S4, typename S5, typename S6, typename S7, typename S8, typename S9, typename S10
> struct TupleRep {
  S1 r1;
  S2 r2;
  S3 r3;
  S4 r4;
  S5 r5;
  S6 r6;
  S7 r7;
  S8 r8;
  S9 r9;
  S10 r10;
};















template<
  typename S1
> struct TupleRep<
  S1, void, void, void, void, void, void, void, void, void
>
{
  S1 r1;
};

template<
  typename M1
> struct CountTuple<
  M1, void, void, void, void, void, void, void, void, void
>
{
  enum { count = 1};
};














template<
  typename S1, typename S2
> struct TupleRep<
  S1, S2, void, void, void, void, void, void, void, void
>
{
  S1 r1;
  S2 r2;
};

template<
  typename M1, typename M2
> struct CountTuple<
  M1, M2, void, void, void, void, void, void, void, void
>
{
  enum { count = 2};
};














template<
  typename S1, typename S2, typename S3
> struct TupleRep<
  S1, S2, S3, void, void, void, void, void, void, void
>
{
  S1 r1;
  S2 r2;
  S3 r3;
};

template<
  typename M1, typename M2, typename M3
> struct CountTuple<
  M1, M2, M3, void, void, void, void, void, void, void
>
{
  enum { count = 3};
};














template<
  typename S1, typename S2, typename S3, typename S4
> struct TupleRep<
  S1, S2, S3, S4, void, void, void, void, void, void
>
{
  S1 r1;
  S2 r2;
  S3 r3;
  S4 r4;
};

template<
  typename M1, typename M2, typename M3, typename M4
> struct CountTuple<
  M1, M2, M3, M4, void, void, void, void, void, void
>
{
  enum { count = 4};
};














template<
  typename S1, typename S2, typename S3, typename S4, typename S5
> struct TupleRep<
  S1, S2, S3, S4, S5, void, void, void, void, void
>
{
  S1 r1;
  S2 r2;
  S3 r3;
  S4 r4;
  S5 r5;
};

template<
  typename M1, typename M2, typename M3, typename M4, typename M5
> struct CountTuple<
  M1, M2, M3, M4, M5, void, void, void, void, void
>
{
  enum { count = 5};
};














template<
  typename S1, typename S2, typename S3, typename S4, typename S5, typename S6
> struct TupleRep<
  S1, S2, S3, S4, S5, S6, void, void, void, void
>
{
  S1 r1;
  S2 r2;
  S3 r3;
  S4 r4;
  S5 r5;
  S6 r6;
};

template<
  typename M1, typename M2, typename M3, typename M4, typename M5, typename M6
> struct CountTuple<
  M1, M2, M3, M4, M5, M6, void, void, void, void
>
{
  enum { count = 6};
};














template<
  typename S1, typename S2, typename S3, typename S4, typename S5, typename S6, typename S7
> struct TupleRep<
  S1, S2, S3, S4, S5, S6, S7, void, void, void
>
{
  S1 r1;
  S2 r2;
  S3 r3;
  S4 r4;
  S5 r5;
  S6 r6;
  S7 r7;
};

template<
  typename M1, typename M2, typename M3, typename M4, typename M5, typename M6, typename M7
> struct CountTuple<
  M1, M2, M3, M4, M5, M6, M7, void, void, void
>
{
  enum { count = 7};
};














template<
  typename S1, typename S2, typename S3, typename S4, typename S5, typename S6, typename S7, typename S8
> struct TupleRep<
  S1, S2, S3, S4, S5, S6, S7, S8, void, void
>
{
  S1 r1;
  S2 r2;
  S3 r3;
  S4 r4;
  S5 r5;
  S6 r6;
  S7 r7;
  S8 r8;
};

template<
  typename M1, typename M2, typename M3, typename M4, typename M5, typename M6, typename M7, typename M8
> struct CountTuple<
  M1, M2, M3, M4, M5, M6, M7, M8, void, void
>
{
  enum { count = 8};
};














template<
  typename S1, typename S2, typename S3, typename S4, typename S5, typename S6, typename S7, typename S8, typename S9
> struct TupleRep<
  S1, S2, S3, S4, S5, S6, S7, S8, S9, void
>
{
  S1 r1;
  S2 r2;
  S3 r3;
  S4 r4;
  S5 r5;
  S6 r6;
  S7 r7;
  S8 r8;
  S9 r9;
};

template<
  typename M1, typename M2, typename M3, typename M4, typename M5, typename M6, typename M7, typename M8, typename M9
> struct CountTuple<
  M1, M2, M3, M4, M5, M6, M7, M8, M9, void
>
{
  enum { count = 9};
};































template<
  typename M1 =void, typename S1 =void, typename M2 =void, typename S2 =void, typename M3 =void, typename S3 =void, typename M4 =void, typename S4 =void, typename M5 =void, typename S5 =void, typename M6 =void, typename S6 =void, typename M7 =void, typename S7 =void, typename M8 =void, typename S8 =void, typename M9 =void, typename S9 =void, typename M10 =void, typename S10 =void
> struct Tuple : public TupleRep<S1,S2,S3,S4,S5,S6,S7,S8,S9,S10> {
  typedef typename TraitUAMParam<M1>::mode_t mode1_t;
  typedef typename TraitUAMParam<M2>::mode_t mode2_t;
  typedef typename TraitUAMParam<M3>::mode_t mode3_t;
  typedef typename TraitUAMParam<M4>::mode_t mode4_t;
  typedef typename TraitUAMParam<M5>::mode_t mode5_t;
  typedef typename TraitUAMParam<M6>::mode_t mode6_t;
  typedef typename TraitUAMParam<M7>::mode_t mode7_t;
  typedef typename TraitUAMParam<M8>::mode_t mode8_t;
  typedef typename TraitUAMParam<M9>::mode_t mode9_t;
  typedef typename TraitUAMParam<M10>::mode_t mode10_t;
  enum { count =CountTuple<M1,M2,M3,M4,M5,M6,M7,M8,M9,M10>::count };
};

// --------------------------------------------------------------------
