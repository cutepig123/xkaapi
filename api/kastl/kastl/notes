-- bugs
. accumulate doesnot return the correct value
 . with >= 3 thread, but works with for_each
 . thus reduction bugged ?
  . missed thieves ?
  . at least, everything is processed (checked by marking items)
  . seems there is a problem in preemption, result not reloaded?
  --> actually thieves are missed, not reduced
  --> race between the splitter and the reducer
   -> redux doesnot see some in the splitter
 . probleme de liaison du resultat du thief: dans [o.0], on voit
 toute une serie d extraction, un return (donc pas de preemption)
  -> semble que ca soit ecrase
  -> [o.1] contient une trace, on voit que le resultat de la reduction
  n a pas le bonne valeur
   -> le resultat alias un autre resultat, d ou le bug
   -> c est donc que la stack allouee n est plus valide
   -> le bug est la, on utilise la stack (issue du pushdata_align)
   pour stocker le resultat mais elle n est plus valide, reutilisee
   par une autre task

-- todos
. brancher et recompiler le runtime
. ajouter les modifs necessaires a previous_branch/kastl_sequences.h

. faire les tests + les benchs

. window extractor
 . should slide as space becomes avail, not at the end of the loop
 . sizes must be of the right type (ie. sign errors...)

. faire un preempter, meme que reducer
 . PreemptionTag = nopreempt_tag

-- impl
template<typename Iterator>
struct algorithm_result : base_result
{
  Iterator _value;

  void algorithm_result(Iterator& value)
    : _value(value)
  {}

  bool is_found()
  {
    return false;
  }

};

template<typename Value>
struct numeric_result : base_result
{
};


struct void_result
{
};
