/* KAAPI public interface */
// KAAPI library source
// -----------------------------------------
// by Thierry Gautier
//(c) INRIA, projet MOAIS, 2006-2010
//
// **********************************************************
// WARNING! This file has been automatically generated by M4
// Mer 24 fÃ©v 2010 21:45:58 CET
// *********************************************************











// --------------------------------------------------------------------
/* 0 is the number of possible parameters */
/* Fi: format parameters Shared_XX, XX -> XX */
template<>
struct Task<0> {
  
  struct Signature { 
    
    
    void operator() ( Thread* thread  ) {}
    void get_formal_param ( Thread* thread  ){}
  };
};

/* Kaapi closure representation */
template<class TASK >
struct KaapiTaskArg0{ 
 
 
 
  typedef KaapiTaskArg0<TASK > Self_t;

  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<bool hasstackparam, class TASK >
struct KaapiCPUBody0 {};

/* Kaapi binder to call task with stack args */
template<class TASK >
struct KaapiCPUBody0<true, TASK > {
 
  typedef KaapiTaskArg0<TASK > Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    
    dummy( (Thread*)stack  );
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK >
struct KaapiCPUBody0<false, TASK > {
 
  typedef KaapiTaskArg0<TASK > Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    
    dummy( );
  }
};


template<bool hasstackparam, class TASK >
struct KaapiGPUBody0 {};

/* Kaapi binder to call task with stack args */
template<class TASK >
struct KaapiGPUBody0<true, TASK > {
 
  typedef KaapiTaskArg0<TASK > Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    
    dummy( (Thread*)stack  );
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK >
struct KaapiGPUBody0<false, TASK > {
 
  typedef KaapiTaskArg0<TASK > Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    
    dummy( );
  }
};




template<class TASK >
struct FormatClosure0 {
  typedef KaapiTaskArg0<TASK > Closure_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat()
  { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    
    
    
    static Closure_t a;
    
    
    
    static std::string task_name = std::string("__Z")+std::string(typeid(Closure_t).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(Closure_t),
          0,
          0,
          0,
          0
      );
    return &format;
  }
};


template<class TASK >
struct InitFormatClosure0 {

  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)(  ) )
  {
    typedef void (TASK::*type_default_t)(Thread* );
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody0<false, TASK >::body;
  }
  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread*  ) )
  {
    typedef void (TASK::*type_default_t)(Thread* );
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody0<true, TASK >::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)(  ) )
  {
    typedef void (TASK::*type_default_t)(Thread* );
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody0<false, TASK >::body;
  }
  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread*  ) )
  {
    typedef void (TASK::*type_default_t)(Thread* );
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody0<true, TASK >::body;
  }


  static kaapi_format_t* registerformat( void (TASK::*method)( Thread* thread  ) )
  {
    kaapi_format_t* fmt = FormatClosure0<TASK  >::registerformat();
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK >
kaapi_format_t FormatClosure0<TASK >::format;

template<class TASK >
kaapi_format_id_t FormatClosure0<TASK >::fmid = 0;

template<class TASK >
const kaapi_task_bodyid_t KaapiTaskArg0<TASK >::bodyid 
  = InitFormatClosure0<TASK >::registerformat(&TASK::get_formal_param)->bodyid;












// --------------------------------------------------------------------
/* 1 is the number of possible parameters */
/* Fi: format parameters Shared_XX, XX -> XX */
template<>
struct Task<1> {
  template<class F1>
  struct Signature { 
    typedef F1 formal1_t;
    
    typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
    
    void operator() ( Thread* thread , type_inuserfunction_F1 ) {}
    void get_formal_param ( Thread* thread , F1 f1 ){}
  };
};

/* Kaapi closure representation */
template<class TASK ,class F1>
struct KaapiTaskArg1{ 
  typedef typename Trait_ParamClosure<F1>::type_inclosure type_inclosure_F1;
  
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  
  type_inclosure_F1 f1;
  
  typedef KaapiTaskArg1<TASK ,F1> Self_t;

  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<bool hasstackparam, class TASK ,class F1>
struct KaapiCPUBody1 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1>
struct KaapiCPUBody1<true, TASK , F1> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  
  typedef KaapiTaskArg1<TASK ,F1> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1>
struct KaapiCPUBody1<false, TASK , F1> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  
  typedef KaapiTaskArg1<TASK ,F1> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1);
  }
};


template<bool hasstackparam, class TASK ,class F1>
struct KaapiGPUBody1 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1>
struct KaapiGPUBody1<true, TASK , F1> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  
  typedef KaapiTaskArg1<TASK ,F1> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1>
struct KaapiGPUBody1<false, TASK , F1> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  
  typedef KaapiTaskArg1<TASK ,F1> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1);
  }
};




template<class TASK ,class F1>
struct FormatClosure1 {
  typedef KaapiTaskArg1<TASK ,F1> Closure_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat()
  { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[1];
    static kaapi_offset_t        array_offset[1];
    static const kaapi_format_t* array_format[1];
    static Closure_t a;
    array_mode[1-1] = (kaapi_access_mode_t)Trait_ParamClosure<F1>::xkaapi_mode;
    
    array_offset[1-1] = (char*)&a.f1 - (char*)&a;
    
    array_format[1-1] = Trait_ParamClosure<F1>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(Closure_t).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(Closure_t),
          1,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
};


template<class TASK ,class F1>
struct InitFormatClosure1 {

  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( type_inuserfunction_F1 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody1<false, TASK ,F1>::body;
  }
  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , type_inuserfunction_F1 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody1<true, TASK ,F1>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( type_inuserfunction_F1 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody1<false, TASK ,F1>::body;
  }
  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , type_inuserfunction_F1 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody1<true, TASK ,F1>::body;
  }


  static kaapi_format_t* registerformat( void (TASK::*method)( Thread* thread , F1 ) )
  {
    kaapi_format_t* fmt = FormatClosure1<TASK  ,F1>::registerformat();
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,class F1>
kaapi_format_t FormatClosure1<TASK ,F1>::format;

template<class TASK ,class F1>
kaapi_format_id_t FormatClosure1<TASK ,F1>::fmid = 0;

template<class TASK ,class F1>
const kaapi_task_bodyid_t KaapiTaskArg1<TASK ,F1>::bodyid 
  = InitFormatClosure1<TASK ,F1>::registerformat(&TASK::get_formal_param)->bodyid;












// --------------------------------------------------------------------
/* 2 is the number of possible parameters */
/* Fi: format parameters Shared_XX, XX -> XX */
template<>
struct Task<2> {
  template<class F1, class F2>
  struct Signature { 
    typedef F1 formal1_t;
    typedef F2 formal2_t;
    
    typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
    typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
    
    void operator() ( Thread* thread , type_inuserfunction_F1, type_inuserfunction_F2 ) {}
    void get_formal_param ( Thread* thread , F1 f1, F2 f2 ){}
  };
};

/* Kaapi closure representation */
template<class TASK ,class F1 ,class F2>
struct KaapiTaskArg2{ 
  typedef typename Trait_ParamClosure<F1>::type_inclosure type_inclosure_F1;
  typedef typename Trait_ParamClosure<F2>::type_inclosure type_inclosure_F2;
  
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  
  type_inclosure_F1 f1;
  type_inclosure_F2 f2;
  
  typedef KaapiTaskArg2<TASK ,F1,F2> Self_t;

  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<bool hasstackparam, class TASK ,class F1 ,class F2>
struct KaapiCPUBody2 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2>
struct KaapiCPUBody2<true, TASK , F1 , F2> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  
  typedef KaapiTaskArg2<TASK ,F1,F2> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2>
struct KaapiCPUBody2<false, TASK , F1 , F2> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  
  typedef KaapiTaskArg2<TASK ,F1,F2> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2);
  }
};


template<bool hasstackparam, class TASK ,class F1 ,class F2>
struct KaapiGPUBody2 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2>
struct KaapiGPUBody2<true, TASK , F1 , F2> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  
  typedef KaapiTaskArg2<TASK ,F1,F2> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2>
struct KaapiGPUBody2<false, TASK , F1 , F2> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  
  typedef KaapiTaskArg2<TASK ,F1,F2> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2);
  }
};




template<class TASK ,class F1 ,class F2>
struct FormatClosure2 {
  typedef KaapiTaskArg2<TASK ,F1,F2> Closure_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat()
  { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[2];
    static kaapi_offset_t        array_offset[2];
    static const kaapi_format_t* array_format[2];
    static Closure_t a;
    array_mode[1-1] = (kaapi_access_mode_t)Trait_ParamClosure<F1>::xkaapi_mode;
    array_mode[2-1] = (kaapi_access_mode_t)Trait_ParamClosure<F2>::xkaapi_mode;
    
    array_offset[1-1] = (char*)&a.f1 - (char*)&a;
    array_offset[2-1] = (char*)&a.f2 - (char*)&a;
    
    array_format[1-1] = Trait_ParamClosure<F1>::get_format();
    array_format[2-1] = Trait_ParamClosure<F2>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(Closure_t).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(Closure_t),
          2,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
};


template<class TASK ,class F1 ,class F2>
struct InitFormatClosure2 {

  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody2<false, TASK ,F1 ,F2>::body;
  }
  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody2<true, TASK ,F1 ,F2>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody2<false, TASK ,F1 ,F2>::body;
  }
  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody2<true, TASK ,F1 ,F2>::body;
  }


  static kaapi_format_t* registerformat( void (TASK::*method)( Thread* thread , F1, F2 ) )
  {
    kaapi_format_t* fmt = FormatClosure2<TASK  ,F1,F2>::registerformat();
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,class F1 ,class F2>
kaapi_format_t FormatClosure2<TASK ,F1 ,F2>::format;

template<class TASK ,class F1 ,class F2>
kaapi_format_id_t FormatClosure2<TASK ,F1 ,F2>::fmid = 0;

template<class TASK ,class F1 ,class F2>
const kaapi_task_bodyid_t KaapiTaskArg2<TASK ,F1 ,F2>::bodyid 
  = InitFormatClosure2<TASK ,F1 ,F2>::registerformat(&TASK::get_formal_param)->bodyid;












// --------------------------------------------------------------------
/* 3 is the number of possible parameters */
/* Fi: format parameters Shared_XX, XX -> XX */
template<>
struct Task<3> {
  template<class F1, class F2, class F3>
  struct Signature { 
    typedef F1 formal1_t;
    typedef F2 formal2_t;
    typedef F3 formal3_t;
    
    typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
    typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
    typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
    
    void operator() ( Thread* thread , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3 ) {}
    void get_formal_param ( Thread* thread , F1 f1, F2 f2, F3 f3 ){}
  };
};

/* Kaapi closure representation */
template<class TASK ,class F1 ,class F2 ,class F3>
struct KaapiTaskArg3{ 
  typedef typename Trait_ParamClosure<F1>::type_inclosure type_inclosure_F1;
  typedef typename Trait_ParamClosure<F2>::type_inclosure type_inclosure_F2;
  typedef typename Trait_ParamClosure<F3>::type_inclosure type_inclosure_F3;
  
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  
  type_inclosure_F1 f1;
  type_inclosure_F2 f2;
  type_inclosure_F3 f3;
  
  typedef KaapiTaskArg3<TASK ,F1,F2,F3> Self_t;

  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3>
struct KaapiCPUBody3 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3>
struct KaapiCPUBody3<true, TASK , F1 , F2 , F3> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  
  typedef KaapiTaskArg3<TASK ,F1,F2,F3> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3>
struct KaapiCPUBody3<false, TASK , F1 , F2 , F3> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  
  typedef KaapiTaskArg3<TASK ,F1,F2,F3> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3);
  }
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3>
struct KaapiGPUBody3 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3>
struct KaapiGPUBody3<true, TASK , F1 , F2 , F3> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  
  typedef KaapiTaskArg3<TASK ,F1,F2,F3> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3>
struct KaapiGPUBody3<false, TASK , F1 , F2 , F3> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  
  typedef KaapiTaskArg3<TASK ,F1,F2,F3> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3);
  }
};




template<class TASK ,class F1 ,class F2 ,class F3>
struct FormatClosure3 {
  typedef KaapiTaskArg3<TASK ,F1,F2,F3> Closure_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat()
  { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[3];
    static kaapi_offset_t        array_offset[3];
    static const kaapi_format_t* array_format[3];
    static Closure_t a;
    array_mode[1-1] = (kaapi_access_mode_t)Trait_ParamClosure<F1>::xkaapi_mode;
    array_mode[2-1] = (kaapi_access_mode_t)Trait_ParamClosure<F2>::xkaapi_mode;
    array_mode[3-1] = (kaapi_access_mode_t)Trait_ParamClosure<F3>::xkaapi_mode;
    
    array_offset[1-1] = (char*)&a.f1 - (char*)&a;
    array_offset[2-1] = (char*)&a.f2 - (char*)&a;
    array_offset[3-1] = (char*)&a.f3 - (char*)&a;
    
    array_format[1-1] = Trait_ParamClosure<F1>::get_format();
    array_format[2-1] = Trait_ParamClosure<F2>::get_format();
    array_format[3-1] = Trait_ParamClosure<F3>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(Closure_t).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(Closure_t),
          3,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
};


template<class TASK ,class F1 ,class F2 ,class F3>
struct InitFormatClosure3 {

  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody3<false, TASK ,F1 ,F2 ,F3>::body;
  }
  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody3<true, TASK ,F1 ,F2 ,F3>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody3<false, TASK ,F1 ,F2 ,F3>::body;
  }
  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody3<true, TASK ,F1 ,F2 ,F3>::body;
  }


  static kaapi_format_t* registerformat( void (TASK::*method)( Thread* thread , F1, F2, F3 ) )
  {
    kaapi_format_t* fmt = FormatClosure3<TASK  ,F1,F2,F3>::registerformat();
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,class F1 ,class F2 ,class F3>
kaapi_format_t FormatClosure3<TASK ,F1 ,F2 ,F3>::format;

template<class TASK ,class F1 ,class F2 ,class F3>
kaapi_format_id_t FormatClosure3<TASK ,F1 ,F2 ,F3>::fmid = 0;

template<class TASK ,class F1 ,class F2 ,class F3>
const kaapi_task_bodyid_t KaapiTaskArg3<TASK ,F1 ,F2 ,F3>::bodyid 
  = InitFormatClosure3<TASK ,F1 ,F2 ,F3>::registerformat(&TASK::get_formal_param)->bodyid;












// --------------------------------------------------------------------
/* 4 is the number of possible parameters */
/* Fi: format parameters Shared_XX, XX -> XX */
template<>
struct Task<4> {
  template<class F1, class F2, class F3, class F4>
  struct Signature { 
    typedef F1 formal1_t;
    typedef F2 formal2_t;
    typedef F3 formal3_t;
    typedef F4 formal4_t;
    
    typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
    typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
    typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
    typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
    
    void operator() ( Thread* thread , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4 ) {}
    void get_formal_param ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4 ){}
  };
};

/* Kaapi closure representation */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4>
struct KaapiTaskArg4{ 
  typedef typename Trait_ParamClosure<F1>::type_inclosure type_inclosure_F1;
  typedef typename Trait_ParamClosure<F2>::type_inclosure type_inclosure_F2;
  typedef typename Trait_ParamClosure<F3>::type_inclosure type_inclosure_F3;
  typedef typename Trait_ParamClosure<F4>::type_inclosure type_inclosure_F4;
  
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  
  type_inclosure_F1 f1;
  type_inclosure_F2 f2;
  type_inclosure_F3 f3;
  type_inclosure_F4 f4;
  
  typedef KaapiTaskArg4<TASK ,F1,F2,F3,F4> Self_t;

  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4>
struct KaapiCPUBody4 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4>
struct KaapiCPUBody4<true, TASK , F1 , F2 , F3 , F4> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  
  typedef KaapiTaskArg4<TASK ,F1,F2,F3,F4> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4>
struct KaapiCPUBody4<false, TASK , F1 , F2 , F3 , F4> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  
  typedef KaapiTaskArg4<TASK ,F1,F2,F3,F4> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4);
  }
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4>
struct KaapiGPUBody4 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4>
struct KaapiGPUBody4<true, TASK , F1 , F2 , F3 , F4> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  
  typedef KaapiTaskArg4<TASK ,F1,F2,F3,F4> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4>
struct KaapiGPUBody4<false, TASK , F1 , F2 , F3 , F4> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  
  typedef KaapiTaskArg4<TASK ,F1,F2,F3,F4> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4);
  }
};




template<class TASK ,class F1 ,class F2 ,class F3 ,class F4>
struct FormatClosure4 {
  typedef KaapiTaskArg4<TASK ,F1,F2,F3,F4> Closure_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat()
  { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[4];
    static kaapi_offset_t        array_offset[4];
    static const kaapi_format_t* array_format[4];
    static Closure_t a;
    array_mode[1-1] = (kaapi_access_mode_t)Trait_ParamClosure<F1>::xkaapi_mode;
    array_mode[2-1] = (kaapi_access_mode_t)Trait_ParamClosure<F2>::xkaapi_mode;
    array_mode[3-1] = (kaapi_access_mode_t)Trait_ParamClosure<F3>::xkaapi_mode;
    array_mode[4-1] = (kaapi_access_mode_t)Trait_ParamClosure<F4>::xkaapi_mode;
    
    array_offset[1-1] = (char*)&a.f1 - (char*)&a;
    array_offset[2-1] = (char*)&a.f2 - (char*)&a;
    array_offset[3-1] = (char*)&a.f3 - (char*)&a;
    array_offset[4-1] = (char*)&a.f4 - (char*)&a;
    
    array_format[1-1] = Trait_ParamClosure<F1>::get_format();
    array_format[2-1] = Trait_ParamClosure<F2>::get_format();
    array_format[3-1] = Trait_ParamClosure<F3>::get_format();
    array_format[4-1] = Trait_ParamClosure<F4>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(Closure_t).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(Closure_t),
          4,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
};


template<class TASK ,class F1 ,class F2 ,class F3 ,class F4>
struct InitFormatClosure4 {

  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody4<false, TASK ,F1 ,F2 ,F3 ,F4>::body;
  }
  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody4<true, TASK ,F1 ,F2 ,F3 ,F4>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody4<false, TASK ,F1 ,F2 ,F3 ,F4>::body;
  }
  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody4<true, TASK ,F1 ,F2 ,F3 ,F4>::body;
  }


  static kaapi_format_t* registerformat( void (TASK::*method)( Thread* thread , F1, F2, F3, F4 ) )
  {
    kaapi_format_t* fmt = FormatClosure4<TASK  ,F1,F2,F3,F4>::registerformat();
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4>
kaapi_format_t FormatClosure4<TASK ,F1 ,F2 ,F3 ,F4>::format;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4>
kaapi_format_id_t FormatClosure4<TASK ,F1 ,F2 ,F3 ,F4>::fmid = 0;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4>
const kaapi_task_bodyid_t KaapiTaskArg4<TASK ,F1 ,F2 ,F3 ,F4>::bodyid 
  = InitFormatClosure4<TASK ,F1 ,F2 ,F3 ,F4>::registerformat(&TASK::get_formal_param)->bodyid;












// --------------------------------------------------------------------
/* 5 is the number of possible parameters */
/* Fi: format parameters Shared_XX, XX -> XX */
template<>
struct Task<5> {
  template<class F1, class F2, class F3, class F4, class F5>
  struct Signature { 
    typedef F1 formal1_t;
    typedef F2 formal2_t;
    typedef F3 formal3_t;
    typedef F4 formal4_t;
    typedef F5 formal5_t;
    
    typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
    typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
    typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
    typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
    typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
    
    void operator() ( Thread* thread , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5 ) {}
    void get_formal_param ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4, F5 f5 ){}
  };
};

/* Kaapi closure representation */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
struct KaapiTaskArg5{ 
  typedef typename Trait_ParamClosure<F1>::type_inclosure type_inclosure_F1;
  typedef typename Trait_ParamClosure<F2>::type_inclosure type_inclosure_F2;
  typedef typename Trait_ParamClosure<F3>::type_inclosure type_inclosure_F3;
  typedef typename Trait_ParamClosure<F4>::type_inclosure type_inclosure_F4;
  typedef typename Trait_ParamClosure<F5>::type_inclosure type_inclosure_F5;
  
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  
  type_inclosure_F1 f1;
  type_inclosure_F2 f2;
  type_inclosure_F3 f3;
  type_inclosure_F4 f4;
  type_inclosure_F5 f5;
  
  typedef KaapiTaskArg5<TASK ,F1,F2,F3,F4,F5> Self_t;

  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
struct KaapiCPUBody5 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
struct KaapiCPUBody5<true, TASK , F1 , F2 , F3 , F4 , F5> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  
  typedef KaapiTaskArg5<TASK ,F1,F2,F3,F4,F5> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
struct KaapiCPUBody5<false, TASK , F1 , F2 , F3 , F4 , F5> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  
  typedef KaapiTaskArg5<TASK ,F1,F2,F3,F4,F5> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5);
  }
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
struct KaapiGPUBody5 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
struct KaapiGPUBody5<true, TASK , F1 , F2 , F3 , F4 , F5> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  
  typedef KaapiTaskArg5<TASK ,F1,F2,F3,F4,F5> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
struct KaapiGPUBody5<false, TASK , F1 , F2 , F3 , F4 , F5> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  
  typedef KaapiTaskArg5<TASK ,F1,F2,F3,F4,F5> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5);
  }
};




template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
struct FormatClosure5 {
  typedef KaapiTaskArg5<TASK ,F1,F2,F3,F4,F5> Closure_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat()
  { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[5];
    static kaapi_offset_t        array_offset[5];
    static const kaapi_format_t* array_format[5];
    static Closure_t a;
    array_mode[1-1] = (kaapi_access_mode_t)Trait_ParamClosure<F1>::xkaapi_mode;
    array_mode[2-1] = (kaapi_access_mode_t)Trait_ParamClosure<F2>::xkaapi_mode;
    array_mode[3-1] = (kaapi_access_mode_t)Trait_ParamClosure<F3>::xkaapi_mode;
    array_mode[4-1] = (kaapi_access_mode_t)Trait_ParamClosure<F4>::xkaapi_mode;
    array_mode[5-1] = (kaapi_access_mode_t)Trait_ParamClosure<F5>::xkaapi_mode;
    
    array_offset[1-1] = (char*)&a.f1 - (char*)&a;
    array_offset[2-1] = (char*)&a.f2 - (char*)&a;
    array_offset[3-1] = (char*)&a.f3 - (char*)&a;
    array_offset[4-1] = (char*)&a.f4 - (char*)&a;
    array_offset[5-1] = (char*)&a.f5 - (char*)&a;
    
    array_format[1-1] = Trait_ParamClosure<F1>::get_format();
    array_format[2-1] = Trait_ParamClosure<F2>::get_format();
    array_format[3-1] = Trait_ParamClosure<F3>::get_format();
    array_format[4-1] = Trait_ParamClosure<F4>::get_format();
    array_format[5-1] = Trait_ParamClosure<F5>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(Closure_t).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(Closure_t),
          5,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
};


template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
struct InitFormatClosure5 {

  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4,type_inuserfunction_F5 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody5<false, TASK ,F1 ,F2 ,F3 ,F4 ,F5>::body;
  }
  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody5<true, TASK ,F1 ,F2 ,F3 ,F4 ,F5>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4,type_inuserfunction_F5 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody5<false, TASK ,F1 ,F2 ,F3 ,F4 ,F5>::body;
  }
  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody5<true, TASK ,F1 ,F2 ,F3 ,F4 ,F5>::body;
  }


  static kaapi_format_t* registerformat( void (TASK::*method)( Thread* thread , F1, F2, F3, F4, F5 ) )
  {
    kaapi_format_t* fmt = FormatClosure5<TASK  ,F1,F2,F3,F4,F5>::registerformat();
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
kaapi_format_t FormatClosure5<TASK ,F1 ,F2 ,F3 ,F4 ,F5>::format;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
kaapi_format_id_t FormatClosure5<TASK ,F1 ,F2 ,F3 ,F4 ,F5>::fmid = 0;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
const kaapi_task_bodyid_t KaapiTaskArg5<TASK ,F1 ,F2 ,F3 ,F4 ,F5>::bodyid 
  = InitFormatClosure5<TASK ,F1 ,F2 ,F3 ,F4 ,F5>::registerformat(&TASK::get_formal_param)->bodyid;












// --------------------------------------------------------------------
/* 6 is the number of possible parameters */
/* Fi: format parameters Shared_XX, XX -> XX */
template<>
struct Task<6> {
  template<class F1, class F2, class F3, class F4, class F5, class F6>
  struct Signature { 
    typedef F1 formal1_t;
    typedef F2 formal2_t;
    typedef F3 formal3_t;
    typedef F4 formal4_t;
    typedef F5 formal5_t;
    typedef F6 formal6_t;
    
    typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
    typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
    typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
    typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
    typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
    typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
    
    void operator() ( Thread* thread , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6 ) {}
    void get_formal_param ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6 ){}
  };
};

/* Kaapi closure representation */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
struct KaapiTaskArg6{ 
  typedef typename Trait_ParamClosure<F1>::type_inclosure type_inclosure_F1;
  typedef typename Trait_ParamClosure<F2>::type_inclosure type_inclosure_F2;
  typedef typename Trait_ParamClosure<F3>::type_inclosure type_inclosure_F3;
  typedef typename Trait_ParamClosure<F4>::type_inclosure type_inclosure_F4;
  typedef typename Trait_ParamClosure<F5>::type_inclosure type_inclosure_F5;
  typedef typename Trait_ParamClosure<F6>::type_inclosure type_inclosure_F6;
  
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  
  type_inclosure_F1 f1;
  type_inclosure_F2 f2;
  type_inclosure_F3 f3;
  type_inclosure_F4 f4;
  type_inclosure_F5 f5;
  type_inclosure_F6 f6;
  
  typedef KaapiTaskArg6<TASK ,F1,F2,F3,F4,F5,F6> Self_t;

  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
struct KaapiCPUBody6 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
struct KaapiCPUBody6<true, TASK , F1 , F2 , F3 , F4 , F5 , F6> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  
  typedef KaapiTaskArg6<TASK ,F1,F2,F3,F4,F5,F6> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
struct KaapiCPUBody6<false, TASK , F1 , F2 , F3 , F4 , F5 , F6> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  
  typedef KaapiTaskArg6<TASK ,F1,F2,F3,F4,F5,F6> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6);
  }
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
struct KaapiGPUBody6 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
struct KaapiGPUBody6<true, TASK , F1 , F2 , F3 , F4 , F5 , F6> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  
  typedef KaapiTaskArg6<TASK ,F1,F2,F3,F4,F5,F6> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
struct KaapiGPUBody6<false, TASK , F1 , F2 , F3 , F4 , F5 , F6> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  
  typedef KaapiTaskArg6<TASK ,F1,F2,F3,F4,F5,F6> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6);
  }
};




template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
struct FormatClosure6 {
  typedef KaapiTaskArg6<TASK ,F1,F2,F3,F4,F5,F6> Closure_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat()
  { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[6];
    static kaapi_offset_t        array_offset[6];
    static const kaapi_format_t* array_format[6];
    static Closure_t a;
    array_mode[1-1] = (kaapi_access_mode_t)Trait_ParamClosure<F1>::xkaapi_mode;
    array_mode[2-1] = (kaapi_access_mode_t)Trait_ParamClosure<F2>::xkaapi_mode;
    array_mode[3-1] = (kaapi_access_mode_t)Trait_ParamClosure<F3>::xkaapi_mode;
    array_mode[4-1] = (kaapi_access_mode_t)Trait_ParamClosure<F4>::xkaapi_mode;
    array_mode[5-1] = (kaapi_access_mode_t)Trait_ParamClosure<F5>::xkaapi_mode;
    array_mode[6-1] = (kaapi_access_mode_t)Trait_ParamClosure<F6>::xkaapi_mode;
    
    array_offset[1-1] = (char*)&a.f1 - (char*)&a;
    array_offset[2-1] = (char*)&a.f2 - (char*)&a;
    array_offset[3-1] = (char*)&a.f3 - (char*)&a;
    array_offset[4-1] = (char*)&a.f4 - (char*)&a;
    array_offset[5-1] = (char*)&a.f5 - (char*)&a;
    array_offset[6-1] = (char*)&a.f6 - (char*)&a;
    
    array_format[1-1] = Trait_ParamClosure<F1>::get_format();
    array_format[2-1] = Trait_ParamClosure<F2>::get_format();
    array_format[3-1] = Trait_ParamClosure<F3>::get_format();
    array_format[4-1] = Trait_ParamClosure<F4>::get_format();
    array_format[5-1] = Trait_ParamClosure<F5>::get_format();
    array_format[6-1] = Trait_ParamClosure<F6>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(Closure_t).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(Closure_t),
          6,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
};


template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
struct InitFormatClosure6 {

  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4,type_inuserfunction_F5,type_inuserfunction_F6 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody6<false, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6>::body;
  }
  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody6<true, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4,type_inuserfunction_F5,type_inuserfunction_F6 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody6<false, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6>::body;
  }
  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody6<true, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6>::body;
  }


  static kaapi_format_t* registerformat( void (TASK::*method)( Thread* thread , F1, F2, F3, F4, F5, F6 ) )
  {
    kaapi_format_t* fmt = FormatClosure6<TASK  ,F1,F2,F3,F4,F5,F6>::registerformat();
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
kaapi_format_t FormatClosure6<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6>::format;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
kaapi_format_id_t FormatClosure6<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6>::fmid = 0;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
const kaapi_task_bodyid_t KaapiTaskArg6<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6>::bodyid 
  = InitFormatClosure6<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6>::registerformat(&TASK::get_formal_param)->bodyid;












// --------------------------------------------------------------------
/* 7 is the number of possible parameters */
/* Fi: format parameters Shared_XX, XX -> XX */
template<>
struct Task<7> {
  template<class F1, class F2, class F3, class F4, class F5, class F6, class F7>
  struct Signature { 
    typedef F1 formal1_t;
    typedef F2 formal2_t;
    typedef F3 formal3_t;
    typedef F4 formal4_t;
    typedef F5 formal5_t;
    typedef F6 formal6_t;
    typedef F7 formal7_t;
    
    typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
    typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
    typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
    typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
    typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
    typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
    typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
    
    void operator() ( Thread* thread , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7 ) {}
    void get_formal_param ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7 ){}
  };
};

/* Kaapi closure representation */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
struct KaapiTaskArg7{ 
  typedef typename Trait_ParamClosure<F1>::type_inclosure type_inclosure_F1;
  typedef typename Trait_ParamClosure<F2>::type_inclosure type_inclosure_F2;
  typedef typename Trait_ParamClosure<F3>::type_inclosure type_inclosure_F3;
  typedef typename Trait_ParamClosure<F4>::type_inclosure type_inclosure_F4;
  typedef typename Trait_ParamClosure<F5>::type_inclosure type_inclosure_F5;
  typedef typename Trait_ParamClosure<F6>::type_inclosure type_inclosure_F6;
  typedef typename Trait_ParamClosure<F7>::type_inclosure type_inclosure_F7;
  
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  
  type_inclosure_F1 f1;
  type_inclosure_F2 f2;
  type_inclosure_F3 f3;
  type_inclosure_F4 f4;
  type_inclosure_F5 f5;
  type_inclosure_F6 f6;
  type_inclosure_F7 f7;
  
  typedef KaapiTaskArg7<TASK ,F1,F2,F3,F4,F5,F6,F7> Self_t;

  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
struct KaapiCPUBody7 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
struct KaapiCPUBody7<true, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  
  typedef KaapiTaskArg7<TASK ,F1,F2,F3,F4,F5,F6,F7> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
struct KaapiCPUBody7<false, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  
  typedef KaapiTaskArg7<TASK ,F1,F2,F3,F4,F5,F6,F7> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7);
  }
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
struct KaapiGPUBody7 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
struct KaapiGPUBody7<true, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  
  typedef KaapiTaskArg7<TASK ,F1,F2,F3,F4,F5,F6,F7> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
struct KaapiGPUBody7<false, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  
  typedef KaapiTaskArg7<TASK ,F1,F2,F3,F4,F5,F6,F7> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7);
  }
};




template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
struct FormatClosure7 {
  typedef KaapiTaskArg7<TASK ,F1,F2,F3,F4,F5,F6,F7> Closure_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat()
  { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[7];
    static kaapi_offset_t        array_offset[7];
    static const kaapi_format_t* array_format[7];
    static Closure_t a;
    array_mode[1-1] = (kaapi_access_mode_t)Trait_ParamClosure<F1>::xkaapi_mode;
    array_mode[2-1] = (kaapi_access_mode_t)Trait_ParamClosure<F2>::xkaapi_mode;
    array_mode[3-1] = (kaapi_access_mode_t)Trait_ParamClosure<F3>::xkaapi_mode;
    array_mode[4-1] = (kaapi_access_mode_t)Trait_ParamClosure<F4>::xkaapi_mode;
    array_mode[5-1] = (kaapi_access_mode_t)Trait_ParamClosure<F5>::xkaapi_mode;
    array_mode[6-1] = (kaapi_access_mode_t)Trait_ParamClosure<F6>::xkaapi_mode;
    array_mode[7-1] = (kaapi_access_mode_t)Trait_ParamClosure<F7>::xkaapi_mode;
    
    array_offset[1-1] = (char*)&a.f1 - (char*)&a;
    array_offset[2-1] = (char*)&a.f2 - (char*)&a;
    array_offset[3-1] = (char*)&a.f3 - (char*)&a;
    array_offset[4-1] = (char*)&a.f4 - (char*)&a;
    array_offset[5-1] = (char*)&a.f5 - (char*)&a;
    array_offset[6-1] = (char*)&a.f6 - (char*)&a;
    array_offset[7-1] = (char*)&a.f7 - (char*)&a;
    
    array_format[1-1] = Trait_ParamClosure<F1>::get_format();
    array_format[2-1] = Trait_ParamClosure<F2>::get_format();
    array_format[3-1] = Trait_ParamClosure<F3>::get_format();
    array_format[4-1] = Trait_ParamClosure<F4>::get_format();
    array_format[5-1] = Trait_ParamClosure<F5>::get_format();
    array_format[6-1] = Trait_ParamClosure<F6>::get_format();
    array_format[7-1] = Trait_ParamClosure<F7>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(Closure_t).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(Closure_t),
          7,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
};


template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
struct InitFormatClosure7 {

  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4,type_inuserfunction_F5,type_inuserfunction_F6,type_inuserfunction_F7 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody7<false, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7>::body;
  }
  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody7<true, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4,type_inuserfunction_F5,type_inuserfunction_F6,type_inuserfunction_F7 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody7<false, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7>::body;
  }
  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody7<true, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7>::body;
  }


  static kaapi_format_t* registerformat( void (TASK::*method)( Thread* thread , F1, F2, F3, F4, F5, F6, F7 ) )
  {
    kaapi_format_t* fmt = FormatClosure7<TASK  ,F1,F2,F3,F4,F5,F6,F7>::registerformat();
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
kaapi_format_t FormatClosure7<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7>::format;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
kaapi_format_id_t FormatClosure7<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7>::fmid = 0;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
const kaapi_task_bodyid_t KaapiTaskArg7<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7>::bodyid 
  = InitFormatClosure7<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7>::registerformat(&TASK::get_formal_param)->bodyid;












// --------------------------------------------------------------------
/* 8 is the number of possible parameters */
/* Fi: format parameters Shared_XX, XX -> XX */
template<>
struct Task<8> {
  template<class F1, class F2, class F3, class F4, class F5, class F6, class F7, class F8>
  struct Signature { 
    typedef F1 formal1_t;
    typedef F2 formal2_t;
    typedef F3 formal3_t;
    typedef F4 formal4_t;
    typedef F5 formal5_t;
    typedef F6 formal6_t;
    typedef F7 formal7_t;
    typedef F8 formal8_t;
    
    typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
    typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
    typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
    typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
    typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
    typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
    typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
    typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
    
    void operator() ( Thread* thread , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8 ) {}
    void get_formal_param ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8 ){}
  };
};

/* Kaapi closure representation */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
struct KaapiTaskArg8{ 
  typedef typename Trait_ParamClosure<F1>::type_inclosure type_inclosure_F1;
  typedef typename Trait_ParamClosure<F2>::type_inclosure type_inclosure_F2;
  typedef typename Trait_ParamClosure<F3>::type_inclosure type_inclosure_F3;
  typedef typename Trait_ParamClosure<F4>::type_inclosure type_inclosure_F4;
  typedef typename Trait_ParamClosure<F5>::type_inclosure type_inclosure_F5;
  typedef typename Trait_ParamClosure<F6>::type_inclosure type_inclosure_F6;
  typedef typename Trait_ParamClosure<F7>::type_inclosure type_inclosure_F7;
  typedef typename Trait_ParamClosure<F8>::type_inclosure type_inclosure_F8;
  
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  
  type_inclosure_F1 f1;
  type_inclosure_F2 f2;
  type_inclosure_F3 f3;
  type_inclosure_F4 f4;
  type_inclosure_F5 f5;
  type_inclosure_F6 f6;
  type_inclosure_F7 f7;
  type_inclosure_F8 f8;
  
  typedef KaapiTaskArg8<TASK ,F1,F2,F3,F4,F5,F6,F7,F8> Self_t;

  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
struct KaapiCPUBody8 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
struct KaapiCPUBody8<true, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  
  typedef KaapiTaskArg8<TASK ,F1,F2,F3,F4,F5,F6,F7,F8> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7, (type_inuserfunction_F8)args->f8);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
struct KaapiCPUBody8<false, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  
  typedef KaapiTaskArg8<TASK ,F1,F2,F3,F4,F5,F6,F7,F8> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7, (type_inuserfunction_F8)args->f8);
  }
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
struct KaapiGPUBody8 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
struct KaapiGPUBody8<true, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  
  typedef KaapiTaskArg8<TASK ,F1,F2,F3,F4,F5,F6,F7,F8> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7, (type_inuserfunction_F8)args->f8);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
struct KaapiGPUBody8<false, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  
  typedef KaapiTaskArg8<TASK ,F1,F2,F3,F4,F5,F6,F7,F8> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7, (type_inuserfunction_F8)args->f8);
  }
};




template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
struct FormatClosure8 {
  typedef KaapiTaskArg8<TASK ,F1,F2,F3,F4,F5,F6,F7,F8> Closure_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat()
  { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[8];
    static kaapi_offset_t        array_offset[8];
    static const kaapi_format_t* array_format[8];
    static Closure_t a;
    array_mode[1-1] = (kaapi_access_mode_t)Trait_ParamClosure<F1>::xkaapi_mode;
    array_mode[2-1] = (kaapi_access_mode_t)Trait_ParamClosure<F2>::xkaapi_mode;
    array_mode[3-1] = (kaapi_access_mode_t)Trait_ParamClosure<F3>::xkaapi_mode;
    array_mode[4-1] = (kaapi_access_mode_t)Trait_ParamClosure<F4>::xkaapi_mode;
    array_mode[5-1] = (kaapi_access_mode_t)Trait_ParamClosure<F5>::xkaapi_mode;
    array_mode[6-1] = (kaapi_access_mode_t)Trait_ParamClosure<F6>::xkaapi_mode;
    array_mode[7-1] = (kaapi_access_mode_t)Trait_ParamClosure<F7>::xkaapi_mode;
    array_mode[8-1] = (kaapi_access_mode_t)Trait_ParamClosure<F8>::xkaapi_mode;
    
    array_offset[1-1] = (char*)&a.f1 - (char*)&a;
    array_offset[2-1] = (char*)&a.f2 - (char*)&a;
    array_offset[3-1] = (char*)&a.f3 - (char*)&a;
    array_offset[4-1] = (char*)&a.f4 - (char*)&a;
    array_offset[5-1] = (char*)&a.f5 - (char*)&a;
    array_offset[6-1] = (char*)&a.f6 - (char*)&a;
    array_offset[7-1] = (char*)&a.f7 - (char*)&a;
    array_offset[8-1] = (char*)&a.f8 - (char*)&a;
    
    array_format[1-1] = Trait_ParamClosure<F1>::get_format();
    array_format[2-1] = Trait_ParamClosure<F2>::get_format();
    array_format[3-1] = Trait_ParamClosure<F3>::get_format();
    array_format[4-1] = Trait_ParamClosure<F4>::get_format();
    array_format[5-1] = Trait_ParamClosure<F5>::get_format();
    array_format[6-1] = Trait_ParamClosure<F6>::get_format();
    array_format[7-1] = Trait_ParamClosure<F7>::get_format();
    array_format[8-1] = Trait_ParamClosure<F8>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(Closure_t).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(Closure_t),
          8,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
};


template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
struct InitFormatClosure8 {

  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4,type_inuserfunction_F5,type_inuserfunction_F6,type_inuserfunction_F7,type_inuserfunction_F8 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody8<false, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8>::body;
  }
  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody8<true, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4,type_inuserfunction_F5,type_inuserfunction_F6,type_inuserfunction_F7,type_inuserfunction_F8 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody8<false, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8>::body;
  }
  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody8<true, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8>::body;
  }


  static kaapi_format_t* registerformat( void (TASK::*method)( Thread* thread , F1, F2, F3, F4, F5, F6, F7, F8 ) )
  {
    kaapi_format_t* fmt = FormatClosure8<TASK  ,F1,F2,F3,F4,F5,F6,F7,F8>::registerformat();
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
kaapi_format_t FormatClosure8<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8>::format;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
kaapi_format_id_t FormatClosure8<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8>::fmid = 0;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
const kaapi_task_bodyid_t KaapiTaskArg8<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8>::bodyid 
  = InitFormatClosure8<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8>::registerformat(&TASK::get_formal_param)->bodyid;












// --------------------------------------------------------------------
/* 9 is the number of possible parameters */
/* Fi: format parameters Shared_XX, XX -> XX */
template<>
struct Task<9> {
  template<class F1, class F2, class F3, class F4, class F5, class F6, class F7, class F8, class F9>
  struct Signature { 
    typedef F1 formal1_t;
    typedef F2 formal2_t;
    typedef F3 formal3_t;
    typedef F4 formal4_t;
    typedef F5 formal5_t;
    typedef F6 formal6_t;
    typedef F7 formal7_t;
    typedef F8 formal8_t;
    typedef F9 formal9_t;
    
    typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
    typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
    typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
    typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
    typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
    typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
    typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
    typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
    typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
    
    void operator() ( Thread* thread , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9 ) {}
    void get_formal_param ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9 ){}
  };
};

/* Kaapi closure representation */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
struct KaapiTaskArg9{ 
  typedef typename Trait_ParamClosure<F1>::type_inclosure type_inclosure_F1;
  typedef typename Trait_ParamClosure<F2>::type_inclosure type_inclosure_F2;
  typedef typename Trait_ParamClosure<F3>::type_inclosure type_inclosure_F3;
  typedef typename Trait_ParamClosure<F4>::type_inclosure type_inclosure_F4;
  typedef typename Trait_ParamClosure<F5>::type_inclosure type_inclosure_F5;
  typedef typename Trait_ParamClosure<F6>::type_inclosure type_inclosure_F6;
  typedef typename Trait_ParamClosure<F7>::type_inclosure type_inclosure_F7;
  typedef typename Trait_ParamClosure<F8>::type_inclosure type_inclosure_F8;
  typedef typename Trait_ParamClosure<F9>::type_inclosure type_inclosure_F9;
  
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
  
  type_inclosure_F1 f1;
  type_inclosure_F2 f2;
  type_inclosure_F3 f3;
  type_inclosure_F4 f4;
  type_inclosure_F5 f5;
  type_inclosure_F6 f6;
  type_inclosure_F7 f7;
  type_inclosure_F8 f8;
  type_inclosure_F9 f9;
  
  typedef KaapiTaskArg9<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9> Self_t;

  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
struct KaapiCPUBody9 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
struct KaapiCPUBody9<true, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
  
  typedef KaapiTaskArg9<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7, (type_inuserfunction_F8)args->f8, (type_inuserfunction_F9)args->f9);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
struct KaapiCPUBody9<false, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
  
  typedef KaapiTaskArg9<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7, (type_inuserfunction_F8)args->f8, (type_inuserfunction_F9)args->f9);
  }
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
struct KaapiGPUBody9 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
struct KaapiGPUBody9<true, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
  
  typedef KaapiTaskArg9<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7, (type_inuserfunction_F8)args->f8, (type_inuserfunction_F9)args->f9);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
struct KaapiGPUBody9<false, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
  
  typedef KaapiTaskArg9<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7, (type_inuserfunction_F8)args->f8, (type_inuserfunction_F9)args->f9);
  }
};




template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
struct FormatClosure9 {
  typedef KaapiTaskArg9<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9> Closure_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat()
  { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[9];
    static kaapi_offset_t        array_offset[9];
    static const kaapi_format_t* array_format[9];
    static Closure_t a;
    array_mode[1-1] = (kaapi_access_mode_t)Trait_ParamClosure<F1>::xkaapi_mode;
    array_mode[2-1] = (kaapi_access_mode_t)Trait_ParamClosure<F2>::xkaapi_mode;
    array_mode[3-1] = (kaapi_access_mode_t)Trait_ParamClosure<F3>::xkaapi_mode;
    array_mode[4-1] = (kaapi_access_mode_t)Trait_ParamClosure<F4>::xkaapi_mode;
    array_mode[5-1] = (kaapi_access_mode_t)Trait_ParamClosure<F5>::xkaapi_mode;
    array_mode[6-1] = (kaapi_access_mode_t)Trait_ParamClosure<F6>::xkaapi_mode;
    array_mode[7-1] = (kaapi_access_mode_t)Trait_ParamClosure<F7>::xkaapi_mode;
    array_mode[8-1] = (kaapi_access_mode_t)Trait_ParamClosure<F8>::xkaapi_mode;
    array_mode[9-1] = (kaapi_access_mode_t)Trait_ParamClosure<F9>::xkaapi_mode;
    
    array_offset[1-1] = (char*)&a.f1 - (char*)&a;
    array_offset[2-1] = (char*)&a.f2 - (char*)&a;
    array_offset[3-1] = (char*)&a.f3 - (char*)&a;
    array_offset[4-1] = (char*)&a.f4 - (char*)&a;
    array_offset[5-1] = (char*)&a.f5 - (char*)&a;
    array_offset[6-1] = (char*)&a.f6 - (char*)&a;
    array_offset[7-1] = (char*)&a.f7 - (char*)&a;
    array_offset[8-1] = (char*)&a.f8 - (char*)&a;
    array_offset[9-1] = (char*)&a.f9 - (char*)&a;
    
    array_format[1-1] = Trait_ParamClosure<F1>::get_format();
    array_format[2-1] = Trait_ParamClosure<F2>::get_format();
    array_format[3-1] = Trait_ParamClosure<F3>::get_format();
    array_format[4-1] = Trait_ParamClosure<F4>::get_format();
    array_format[5-1] = Trait_ParamClosure<F5>::get_format();
    array_format[6-1] = Trait_ParamClosure<F6>::get_format();
    array_format[7-1] = Trait_ParamClosure<F7>::get_format();
    array_format[8-1] = Trait_ParamClosure<F8>::get_format();
    array_format[9-1] = Trait_ParamClosure<F9>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(Closure_t).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(Closure_t),
          9,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
};


template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
struct InitFormatClosure9 {

  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4,type_inuserfunction_F5,type_inuserfunction_F6,type_inuserfunction_F7,type_inuserfunction_F8,type_inuserfunction_F9 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody9<false, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9>::body;
  }
  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody9<true, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4,type_inuserfunction_F5,type_inuserfunction_F6,type_inuserfunction_F7,type_inuserfunction_F8,type_inuserfunction_F9 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody9<false, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9>::body;
  }
  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody9<true, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9>::body;
  }


  static kaapi_format_t* registerformat( void (TASK::*method)( Thread* thread , F1, F2, F3, F4, F5, F6, F7, F8, F9 ) )
  {
    kaapi_format_t* fmt = FormatClosure9<TASK  ,F1,F2,F3,F4,F5,F6,F7,F8,F9>::registerformat();
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
kaapi_format_t FormatClosure9<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9>::format;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
kaapi_format_id_t FormatClosure9<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9>::fmid = 0;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
const kaapi_task_bodyid_t KaapiTaskArg9<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9>::bodyid 
  = InitFormatClosure9<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9>::registerformat(&TASK::get_formal_param)->bodyid;












// --------------------------------------------------------------------
/* 10 is the number of possible parameters */
/* Fi: format parameters Shared_XX, XX -> XX */
template<>
struct Task<10> {
  template<class F1, class F2, class F3, class F4, class F5, class F6, class F7, class F8, class F9, class F10>
  struct Signature { 
    typedef F1 formal1_t;
    typedef F2 formal2_t;
    typedef F3 formal3_t;
    typedef F4 formal4_t;
    typedef F5 formal5_t;
    typedef F6 formal6_t;
    typedef F7 formal7_t;
    typedef F8 formal8_t;
    typedef F9 formal9_t;
    typedef F10 formal10_t;
    
    typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
    typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
    typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
    typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
    typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
    typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
    typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
    typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
    typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
    typedef typename Trait_ParamClosure<F10>::type_inuserfunction type_inuserfunction_F10;
    
    void operator() ( Thread* thread , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9, type_inuserfunction_F10 ) {}
    void get_formal_param ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9, F10 f10 ){}
  };
};

/* Kaapi closure representation */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
struct KaapiTaskArg10{ 
  typedef typename Trait_ParamClosure<F1>::type_inclosure type_inclosure_F1;
  typedef typename Trait_ParamClosure<F2>::type_inclosure type_inclosure_F2;
  typedef typename Trait_ParamClosure<F3>::type_inclosure type_inclosure_F3;
  typedef typename Trait_ParamClosure<F4>::type_inclosure type_inclosure_F4;
  typedef typename Trait_ParamClosure<F5>::type_inclosure type_inclosure_F5;
  typedef typename Trait_ParamClosure<F6>::type_inclosure type_inclosure_F6;
  typedef typename Trait_ParamClosure<F7>::type_inclosure type_inclosure_F7;
  typedef typename Trait_ParamClosure<F8>::type_inclosure type_inclosure_F8;
  typedef typename Trait_ParamClosure<F9>::type_inclosure type_inclosure_F9;
  typedef typename Trait_ParamClosure<F10>::type_inclosure type_inclosure_F10;
  
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
  typedef typename Trait_ParamClosure<F10>::type_inuserfunction type_inuserfunction_F10;
  
  type_inclosure_F1 f1;
  type_inclosure_F2 f2;
  type_inclosure_F3 f3;
  type_inclosure_F4 f4;
  type_inclosure_F5 f5;
  type_inclosure_F6 f6;
  type_inclosure_F7 f7;
  type_inclosure_F8 f8;
  type_inclosure_F9 f9;
  type_inclosure_F10 f10;
  
  typedef KaapiTaskArg10<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9,F10> Self_t;

  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
struct KaapiCPUBody10 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
struct KaapiCPUBody10<true, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
  typedef typename Trait_ParamClosure<F10>::type_inuserfunction type_inuserfunction_F10;
  
  typedef KaapiTaskArg10<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9,F10> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7, (type_inuserfunction_F8)args->f8, (type_inuserfunction_F9)args->f9, (type_inuserfunction_F10)args->f10);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
struct KaapiCPUBody10<false, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
  typedef typename Trait_ParamClosure<F10>::type_inuserfunction type_inuserfunction_F10;
  
  typedef KaapiTaskArg10<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9,F10> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7, (type_inuserfunction_F8)args->f8, (type_inuserfunction_F9)args->f9, (type_inuserfunction_F10)args->f10);
  }
};


template<bool hasstackparam, class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
struct KaapiGPUBody10 {};

/* Kaapi binder to call task with stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
struct KaapiGPUBody10<true, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
  typedef typename Trait_ParamClosure<F10>::type_inuserfunction type_inuserfunction_F10;
  
  typedef KaapiTaskArg10<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9,F10> Self_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (Thread*)stack , (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7, (type_inuserfunction_F8)args->f8, (type_inuserfunction_F9)args->f9, (type_inuserfunction_F10)args->f10);
  }
};

/* Kaapi binder to call task without stack args */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
struct KaapiGPUBody10<false, TASK , F1 , F2 , F3 , F4 , F5 , F6 , F7 , F8 , F9 , F10> {
  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
  typedef typename Trait_ParamClosure<F10>::type_inuserfunction type_inuserfunction_F10;
  
  typedef KaapiTaskArg10<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9,F10> Self_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy( (type_inuserfunction_F1)args->f1, (type_inuserfunction_F2)args->f2, (type_inuserfunction_F3)args->f3, (type_inuserfunction_F4)args->f4, (type_inuserfunction_F5)args->f5, (type_inuserfunction_F6)args->f6, (type_inuserfunction_F7)args->f7, (type_inuserfunction_F8)args->f8, (type_inuserfunction_F9)args->f9, (type_inuserfunction_F10)args->f10);
  }
};




template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
struct FormatClosure10 {
  typedef KaapiTaskArg10<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9,F10> Closure_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat()
  { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[10];
    static kaapi_offset_t        array_offset[10];
    static const kaapi_format_t* array_format[10];
    static Closure_t a;
    array_mode[1-1] = (kaapi_access_mode_t)Trait_ParamClosure<F1>::xkaapi_mode;
    array_mode[2-1] = (kaapi_access_mode_t)Trait_ParamClosure<F2>::xkaapi_mode;
    array_mode[3-1] = (kaapi_access_mode_t)Trait_ParamClosure<F3>::xkaapi_mode;
    array_mode[4-1] = (kaapi_access_mode_t)Trait_ParamClosure<F4>::xkaapi_mode;
    array_mode[5-1] = (kaapi_access_mode_t)Trait_ParamClosure<F5>::xkaapi_mode;
    array_mode[6-1] = (kaapi_access_mode_t)Trait_ParamClosure<F6>::xkaapi_mode;
    array_mode[7-1] = (kaapi_access_mode_t)Trait_ParamClosure<F7>::xkaapi_mode;
    array_mode[8-1] = (kaapi_access_mode_t)Trait_ParamClosure<F8>::xkaapi_mode;
    array_mode[9-1] = (kaapi_access_mode_t)Trait_ParamClosure<F9>::xkaapi_mode;
    array_mode[10-1] = (kaapi_access_mode_t)Trait_ParamClosure<F10>::xkaapi_mode;
    
    array_offset[1-1] = (char*)&a.f1 - (char*)&a;
    array_offset[2-1] = (char*)&a.f2 - (char*)&a;
    array_offset[3-1] = (char*)&a.f3 - (char*)&a;
    array_offset[4-1] = (char*)&a.f4 - (char*)&a;
    array_offset[5-1] = (char*)&a.f5 - (char*)&a;
    array_offset[6-1] = (char*)&a.f6 - (char*)&a;
    array_offset[7-1] = (char*)&a.f7 - (char*)&a;
    array_offset[8-1] = (char*)&a.f8 - (char*)&a;
    array_offset[9-1] = (char*)&a.f9 - (char*)&a;
    array_offset[10-1] = (char*)&a.f10 - (char*)&a;
    
    array_format[1-1] = Trait_ParamClosure<F1>::get_format();
    array_format[2-1] = Trait_ParamClosure<F2>::get_format();
    array_format[3-1] = Trait_ParamClosure<F3>::get_format();
    array_format[4-1] = Trait_ParamClosure<F4>::get_format();
    array_format[5-1] = Trait_ParamClosure<F5>::get_format();
    array_format[6-1] = Trait_ParamClosure<F6>::get_format();
    array_format[7-1] = Trait_ParamClosure<F7>::get_format();
    array_format[8-1] = Trait_ParamClosure<F8>::get_format();
    array_format[9-1] = Trait_ParamClosure<F9>::get_format();
    array_format[10-1] = Trait_ParamClosure<F10>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(Closure_t).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(Closure_t),
          10,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
};


template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
struct InitFormatClosure10 {

  typedef typename Trait_ParamClosure<F1>::type_inuserfunction type_inuserfunction_F1;
  typedef typename Trait_ParamClosure<F2>::type_inuserfunction type_inuserfunction_F2;
  typedef typename Trait_ParamClosure<F3>::type_inuserfunction type_inuserfunction_F3;
  typedef typename Trait_ParamClosure<F4>::type_inuserfunction type_inuserfunction_F4;
  typedef typename Trait_ParamClosure<F5>::type_inuserfunction type_inuserfunction_F5;
  typedef typename Trait_ParamClosure<F6>::type_inuserfunction type_inuserfunction_F6;
  typedef typename Trait_ParamClosure<F7>::type_inuserfunction type_inuserfunction_F7;
  typedef typename Trait_ParamClosure<F8>::type_inuserfunction type_inuserfunction_F8;
  typedef typename Trait_ParamClosure<F9>::type_inuserfunction type_inuserfunction_F9;
  typedef typename Trait_ParamClosure<F10>::type_inuserfunction type_inuserfunction_F10;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4,type_inuserfunction_F5,type_inuserfunction_F6,type_inuserfunction_F7,type_inuserfunction_F8,type_inuserfunction_F9,type_inuserfunction_F10 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9, type_inuserfunction_F10);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody10<false, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9 ,F10>::body;
  }
  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9, type_inuserfunction_F10 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9, type_inuserfunction_F10);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody10<true, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9 ,F10>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( type_inuserfunction_F1,type_inuserfunction_F2,type_inuserfunction_F3,type_inuserfunction_F4,type_inuserfunction_F5,type_inuserfunction_F6,type_inuserfunction_F7,type_inuserfunction_F8,type_inuserfunction_F9,type_inuserfunction_F10 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9, type_inuserfunction_F10);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody10<false, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9 ,F10>::body;
  }
  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9, type_inuserfunction_F10 ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , type_inuserfunction_F1, type_inuserfunction_F2, type_inuserfunction_F3, type_inuserfunction_F4, type_inuserfunction_F5, type_inuserfunction_F6, type_inuserfunction_F7, type_inuserfunction_F8, type_inuserfunction_F9, type_inuserfunction_F10);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody10<true, TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9 ,F10>::body;
  }


  static kaapi_format_t* registerformat( void (TASK::*method)( Thread* thread , F1, F2, F3, F4, F5, F6, F7, F8, F9, F10 ) )
  {
    kaapi_format_t* fmt = FormatClosure10<TASK  ,F1,F2,F3,F4,F5,F6,F7,F8,F9,F10>::registerformat();
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
kaapi_format_t FormatClosure10<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9 ,F10>::format;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
kaapi_format_id_t FormatClosure10<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9 ,F10>::fmid = 0;

template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
const kaapi_task_bodyid_t KaapiTaskArg10<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9 ,F10>::bodyid 
  = InitFormatClosure10<TASK ,F1 ,F2 ,F3 ,F4 ,F5 ,F6 ,F7 ,F8 ,F9 ,F10>::registerformat(&TASK::get_formal_param)->bodyid;

