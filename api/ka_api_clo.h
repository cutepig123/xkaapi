/* KAAPI public interface */
// KAAPI library source
// -----------------------------------------
// by Thierry Gautier
//(c) INRIA, projet MOAIS, 2006-2010
//
// **********************************************************
// WARNING! This file has been automatically generated by M4
// Jeu 25 f√©v 2010 16:42:38 CET
// *********************************************************













// --------------------------------------------------------------------
/* 0 is the number of possible parameters */
template<>
struct Task<0> {
  
  struct Signature { 
    
    
    
    
    void operator() ( Thread* thread  ) {}
    void dummy_method_to_have_formal_param_type ( Thread* thread  ){}
  };
};


// --------------------------------------------------------------------
/* Kaapi closure representation */

struct KaapiTaskArg0 { 
 
 
};


// --------------------------------------------------------------------
/* Body generators */
template<bool hasstackparam, class TASK >
struct KaapiCPUBody0 {};


/* Kaapi binder to call task with stack args */
template<class TASK >
struct KaapiCPUBody0<true, TASK > {
  
  
  
  typedef KaapiTaskArg0  TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    
    dummy( (Thread*)stack );
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK >
struct KaapiCPUBody0<false, TASK > {
  
  
  
  typedef KaapiTaskArg0  TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    
    dummy( );
  }
};


template<bool hasstackparam, class TASK >
struct KaapiGPUBody0 {};


/* Kaapi binder to call task with stack args */
template<class TASK >
struct KaapiGPUBody0<true, TASK > {
  
  
  
  typedef KaapiTaskArg0  TaskArg_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    
    dummy( (Thread*)stack );
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK >
struct KaapiGPUBody0<false, TASK > {
  
  
  
  typedef KaapiTaskArg0  TaskArg_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    
    dummy( );
  }
};


template<class TASK >
struct FormatClosure0 {

  
  
  typedef KaapiTaskArg0  TaskArg_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat() { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    
    
    
    TaskArg_t* dummy;
    
    
    
    static std::string task_name = std::string("__Z")+std::string(typeid(TASK).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(TaskArg_t),
          0,
          0,
          0,
          0
      );
    return &format;
  }
  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<class TASK >
struct InitFormatClosure0 {

  
  
  
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)(  ) )
  {
    typedef void (TASK::*type_default_t)(Thread* );
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody0<false, TASK >::body;
  }

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread*  ) )
  {
    typedef void (TASK::*type_default_t)(Thread* );
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody0<true, TASK >::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)(  ) )
  {
    typedef void (TASK::*type_default_t)(Thread* );
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody0<false, TASK >::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread*  ) )
  {
    typedef void (TASK::*type_default_t)(Thread* );
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody0<true, TASK >::body;
  }

  static kaapi_format_t* registerbodies( kaapi_format_t* fmt, void (TASK::*method)( Thread* thread  ) )
  {
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK >
kaapi_format_t FormatClosure0<TASK >::format;

template<class TASK >
kaapi_format_id_t FormatClosure0<TASK >::fmid = 0;

template<class TASK >
const kaapi_task_bodyid_t FormatClosure0<TASK >::bodyid 
    = InitFormatClosure0<TASK >::registerbodies(
          FormatClosure0<TASK >::registerformat(), 
          &TASK::operator()
      )->bodyid;














// --------------------------------------------------------------------
/* 1 is the number of possible parameters */
template<>
struct Task<1> {
  template<class F1>
  struct Signature { 
    typedef typename TraitUAMParam<F1>::uamttype_t uamttype1_t;
    
    typedef typename TraitUAMParam<F1>::mode_t mode1_t;
    
    typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
    
    typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
    
    void operator() ( Thread* thread , formal1_t ) {}
    void dummy_method_to_have_formal_param_type ( Thread* thread , F1 f1 ){}
  };
};


// --------------------------------------------------------------------
/* Kaapi closure representation */
template<typename TraitUAMType1>
struct KaapiTaskArg1 { 
  typedef typename TraitUAMType1::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  
  inclosure1_t f1;
  
};


// --------------------------------------------------------------------
/* Body generators */
template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1>
struct KaapiCPUBody1 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1>
struct KaapiCPUBody1<true, TASK , TraitUAMParam_F1> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  
  typedef KaapiTaskArg1 <uamttype1_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1>
struct KaapiCPUBody1<false, TASK , TraitUAMParam_F1> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  
  typedef KaapiTaskArg1 <uamttype1_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1);
  }
};


template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1>
struct KaapiGPUBody1 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1>
struct KaapiGPUBody1<true, TASK , TraitUAMParam_F1> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  
  typedef KaapiTaskArg1 <uamttype1_t> TaskArg_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1>
struct KaapiGPUBody1<false, TASK , TraitUAMParam_F1> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  
  typedef KaapiTaskArg1 <uamttype1_t> TaskArg_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1);
  }
};


template<class TASK ,typename TraitUAMParam_F1>
struct FormatClosure1 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  
  typedef KaapiTaskArg1 <uamttype1_t> TaskArg_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat() { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[1];
    static kaapi_offset_t        array_offset[1];
    static const kaapi_format_t* array_format[1];
    TaskArg_t* dummy;
    array_mode[1-1] = (kaapi_access_mode_t)TraitUAMParam_F1::mode_t::value;
    
    array_offset[1-1] = (char*)&dummy->f1 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f1); */
    
    array_format[1-1] = WrapperFormat<inclosure1_t>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(TASK).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(TaskArg_t),
          1,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<class TASK ,typename TraitUAMParam_F1>
struct InitFormatClosure1 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( formal1_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody1<false, TASK ,TraitUAMParam_F1>::body;
  }

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , formal1_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody1<true, TASK ,TraitUAMParam_F1>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( formal1_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody1<false, TASK ,TraitUAMParam_F1>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , formal1_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody1<true, TASK ,TraitUAMParam_F1>::body;
  }

  static kaapi_format_t* registerbodies( kaapi_format_t* fmt, void (TASK::*method)( Thread* thread , formal1_t ) )
  {
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,typename TraitUAMParam_F1>
kaapi_format_t FormatClosure1<TASK ,TraitUAMParam_F1>::format;

template<class TASK ,typename TraitUAMParam_F1>
kaapi_format_id_t FormatClosure1<TASK ,TraitUAMParam_F1>::fmid = 0;

template<class TASK ,typename TraitUAMParam_F1>
const kaapi_task_bodyid_t FormatClosure1<TASK ,TraitUAMParam_F1>::bodyid 
    = InitFormatClosure1<TASK ,TraitUAMParam_F1>::registerbodies(
          FormatClosure1<TASK ,TraitUAMParam_F1>::registerformat(), 
          &TASK::operator()
      )->bodyid;














// --------------------------------------------------------------------
/* 2 is the number of possible parameters */
template<>
struct Task<2> {
  template<class F1, class F2>
  struct Signature { 
    typedef typename TraitUAMParam<F1>::uamttype_t uamttype1_t;
    typedef typename TraitUAMParam<F2>::uamttype_t uamttype2_t;
    
    typedef typename TraitUAMParam<F1>::mode_t mode1_t;
    typedef typename TraitUAMParam<F2>::mode_t mode2_t;
    
    typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
    typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
    
    typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
    typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
    
    void operator() ( Thread* thread , formal1_t, formal2_t ) {}
    void dummy_method_to_have_formal_param_type ( Thread* thread , F1 f1, F2 f2 ){}
  };
};


// --------------------------------------------------------------------
/* Kaapi closure representation */
template<typename TraitUAMType1, typename TraitUAMType2>
struct KaapiTaskArg2 { 
  typedef typename TraitUAMType1::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename TraitUAMType2::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  
  inclosure1_t f1;
  inclosure2_t f2;
  
};


// --------------------------------------------------------------------
/* Body generators */
template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2>
struct KaapiCPUBody2 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2>
struct KaapiCPUBody2<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  
  typedef KaapiTaskArg2 <uamttype1_t,uamttype2_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2>
struct KaapiCPUBody2<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  
  typedef KaapiTaskArg2 <uamttype1_t,uamttype2_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2);
  }
};


template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2>
struct KaapiGPUBody2 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2>
struct KaapiGPUBody2<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  
  typedef KaapiTaskArg2 <uamttype1_t,uamttype2_t> TaskArg_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2>
struct KaapiGPUBody2<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  
  typedef KaapiTaskArg2 <uamttype1_t,uamttype2_t> TaskArg_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2);
  }
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2>
struct FormatClosure2 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  
  typedef KaapiTaskArg2 <uamttype1_t,uamttype2_t> TaskArg_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat() { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[2];
    static kaapi_offset_t        array_offset[2];
    static const kaapi_format_t* array_format[2];
    TaskArg_t* dummy;
    array_mode[1-1] = (kaapi_access_mode_t)TraitUAMParam_F1::mode_t::value;
    array_mode[2-1] = (kaapi_access_mode_t)TraitUAMParam_F2::mode_t::value;
    
    array_offset[1-1] = (char*)&dummy->f1 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f1); */
    array_offset[2-1] = (char*)&dummy->f2 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f2); */
    
    array_format[1-1] = WrapperFormat<inclosure1_t>::get_format();
    array_format[2-1] = WrapperFormat<inclosure2_t>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(TASK).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(TaskArg_t),
          2,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2>
struct InitFormatClosure2 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( formal1_t,formal2_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody2<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2>::body;
  }

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , formal1_t, formal2_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody2<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( formal1_t,formal2_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody2<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , formal1_t, formal2_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody2<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2>::body;
  }

  static kaapi_format_t* registerbodies( kaapi_format_t* fmt, void (TASK::*method)( Thread* thread , formal1_t, formal2_t ) )
  {
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2>
kaapi_format_t FormatClosure2<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2>::format;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2>
kaapi_format_id_t FormatClosure2<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2>::fmid = 0;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2>
const kaapi_task_bodyid_t FormatClosure2<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2>::bodyid 
    = InitFormatClosure2<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2>::registerbodies(
          FormatClosure2<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2>::registerformat(), 
          &TASK::operator()
      )->bodyid;














// --------------------------------------------------------------------
/* 3 is the number of possible parameters */
template<>
struct Task<3> {
  template<class F1, class F2, class F3>
  struct Signature { 
    typedef typename TraitUAMParam<F1>::uamttype_t uamttype1_t;
    typedef typename TraitUAMParam<F2>::uamttype_t uamttype2_t;
    typedef typename TraitUAMParam<F3>::uamttype_t uamttype3_t;
    
    typedef typename TraitUAMParam<F1>::mode_t mode1_t;
    typedef typename TraitUAMParam<F2>::mode_t mode2_t;
    typedef typename TraitUAMParam<F3>::mode_t mode3_t;
    
    typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
    typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
    typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
    
    typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
    typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
    typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
    
    void operator() ( Thread* thread , formal1_t, formal2_t, formal3_t ) {}
    void dummy_method_to_have_formal_param_type ( Thread* thread , F1 f1, F2 f2, F3 f3 ){}
  };
};


// --------------------------------------------------------------------
/* Kaapi closure representation */
template<typename TraitUAMType1, typename TraitUAMType2, typename TraitUAMType3>
struct KaapiTaskArg3 { 
  typedef typename TraitUAMType1::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename TraitUAMType2::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename TraitUAMType3::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  
  inclosure1_t f1;
  inclosure2_t f2;
  inclosure3_t f3;
  
};


// --------------------------------------------------------------------
/* Body generators */
template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3>
struct KaapiCPUBody3 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3>
struct KaapiCPUBody3<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  
  typedef KaapiTaskArg3 <uamttype1_t,uamttype2_t,uamttype3_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3>
struct KaapiCPUBody3<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  
  typedef KaapiTaskArg3 <uamttype1_t,uamttype2_t,uamttype3_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3);
  }
};


template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3>
struct KaapiGPUBody3 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3>
struct KaapiGPUBody3<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  
  typedef KaapiTaskArg3 <uamttype1_t,uamttype2_t,uamttype3_t> TaskArg_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3>
struct KaapiGPUBody3<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  
  typedef KaapiTaskArg3 <uamttype1_t,uamttype2_t,uamttype3_t> TaskArg_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3);
  }
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3>
struct FormatClosure3 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  
  typedef KaapiTaskArg3 <uamttype1_t,uamttype2_t,uamttype3_t> TaskArg_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat() { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[3];
    static kaapi_offset_t        array_offset[3];
    static const kaapi_format_t* array_format[3];
    TaskArg_t* dummy;
    array_mode[1-1] = (kaapi_access_mode_t)TraitUAMParam_F1::mode_t::value;
    array_mode[2-1] = (kaapi_access_mode_t)TraitUAMParam_F2::mode_t::value;
    array_mode[3-1] = (kaapi_access_mode_t)TraitUAMParam_F3::mode_t::value;
    
    array_offset[1-1] = (char*)&dummy->f1 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f1); */
    array_offset[2-1] = (char*)&dummy->f2 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f2); */
    array_offset[3-1] = (char*)&dummy->f3 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f3); */
    
    array_format[1-1] = WrapperFormat<inclosure1_t>::get_format();
    array_format[2-1] = WrapperFormat<inclosure2_t>::get_format();
    array_format[3-1] = WrapperFormat<inclosure3_t>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(TASK).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(TaskArg_t),
          3,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3>
struct InitFormatClosure3 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( formal1_t,formal2_t,formal3_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody3<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3>::body;
  }

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody3<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( formal1_t,formal2_t,formal3_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody3<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody3<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3>::body;
  }

  static kaapi_format_t* registerbodies( kaapi_format_t* fmt, void (TASK::*method)( Thread* thread , formal1_t, formal2_t, formal3_t ) )
  {
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3>
kaapi_format_t FormatClosure3<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3>::format;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3>
kaapi_format_id_t FormatClosure3<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3>::fmid = 0;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3>
const kaapi_task_bodyid_t FormatClosure3<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3>::bodyid 
    = InitFormatClosure3<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3>::registerbodies(
          FormatClosure3<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3>::registerformat(), 
          &TASK::operator()
      )->bodyid;














// --------------------------------------------------------------------
/* 4 is the number of possible parameters */
template<>
struct Task<4> {
  template<class F1, class F2, class F3, class F4>
  struct Signature { 
    typedef typename TraitUAMParam<F1>::uamttype_t uamttype1_t;
    typedef typename TraitUAMParam<F2>::uamttype_t uamttype2_t;
    typedef typename TraitUAMParam<F3>::uamttype_t uamttype3_t;
    typedef typename TraitUAMParam<F4>::uamttype_t uamttype4_t;
    
    typedef typename TraitUAMParam<F1>::mode_t mode1_t;
    typedef typename TraitUAMParam<F2>::mode_t mode2_t;
    typedef typename TraitUAMParam<F3>::mode_t mode3_t;
    typedef typename TraitUAMParam<F4>::mode_t mode4_t;
    
    typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
    typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
    typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
    typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
    
    typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
    typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
    typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
    typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
    
    void operator() ( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t ) {}
    void dummy_method_to_have_formal_param_type ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4 ){}
  };
};


// --------------------------------------------------------------------
/* Kaapi closure representation */
template<typename TraitUAMType1, typename TraitUAMType2, typename TraitUAMType3, typename TraitUAMType4>
struct KaapiTaskArg4 { 
  typedef typename TraitUAMType1::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename TraitUAMType2::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename TraitUAMType3::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename TraitUAMType4::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  
  inclosure1_t f1;
  inclosure2_t f2;
  inclosure3_t f3;
  inclosure4_t f4;
  
};


// --------------------------------------------------------------------
/* Body generators */
template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4>
struct KaapiCPUBody4 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4>
struct KaapiCPUBody4<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  
  typedef KaapiTaskArg4 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4>
struct KaapiCPUBody4<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  
  typedef KaapiTaskArg4 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4);
  }
};


template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4>
struct KaapiGPUBody4 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4>
struct KaapiGPUBody4<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  
  typedef KaapiTaskArg4 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t> TaskArg_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4>
struct KaapiGPUBody4<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  
  typedef KaapiTaskArg4 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t> TaskArg_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4);
  }
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4>
struct FormatClosure4 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  
  typedef KaapiTaskArg4 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t> TaskArg_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat() { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[4];
    static kaapi_offset_t        array_offset[4];
    static const kaapi_format_t* array_format[4];
    TaskArg_t* dummy;
    array_mode[1-1] = (kaapi_access_mode_t)TraitUAMParam_F1::mode_t::value;
    array_mode[2-1] = (kaapi_access_mode_t)TraitUAMParam_F2::mode_t::value;
    array_mode[3-1] = (kaapi_access_mode_t)TraitUAMParam_F3::mode_t::value;
    array_mode[4-1] = (kaapi_access_mode_t)TraitUAMParam_F4::mode_t::value;
    
    array_offset[1-1] = (char*)&dummy->f1 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f1); */
    array_offset[2-1] = (char*)&dummy->f2 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f2); */
    array_offset[3-1] = (char*)&dummy->f3 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f3); */
    array_offset[4-1] = (char*)&dummy->f4 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f4); */
    
    array_format[1-1] = WrapperFormat<inclosure1_t>::get_format();
    array_format[2-1] = WrapperFormat<inclosure2_t>::get_format();
    array_format[3-1] = WrapperFormat<inclosure3_t>::get_format();
    array_format[4-1] = WrapperFormat<inclosure4_t>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(TASK).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(TaskArg_t),
          4,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4>
struct InitFormatClosure4 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody4<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4>::body;
  }

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody4<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody4<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody4<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4>::body;
  }

  static kaapi_format_t* registerbodies( kaapi_format_t* fmt, void (TASK::*method)( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t ) )
  {
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4>
kaapi_format_t FormatClosure4<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4>::format;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4>
kaapi_format_id_t FormatClosure4<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4>::fmid = 0;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4>
const kaapi_task_bodyid_t FormatClosure4<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4>::bodyid 
    = InitFormatClosure4<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4>::registerbodies(
          FormatClosure4<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4>::registerformat(), 
          &TASK::operator()
      )->bodyid;














// --------------------------------------------------------------------
/* 5 is the number of possible parameters */
template<>
struct Task<5> {
  template<class F1, class F2, class F3, class F4, class F5>
  struct Signature { 
    typedef typename TraitUAMParam<F1>::uamttype_t uamttype1_t;
    typedef typename TraitUAMParam<F2>::uamttype_t uamttype2_t;
    typedef typename TraitUAMParam<F3>::uamttype_t uamttype3_t;
    typedef typename TraitUAMParam<F4>::uamttype_t uamttype4_t;
    typedef typename TraitUAMParam<F5>::uamttype_t uamttype5_t;
    
    typedef typename TraitUAMParam<F1>::mode_t mode1_t;
    typedef typename TraitUAMParam<F2>::mode_t mode2_t;
    typedef typename TraitUAMParam<F3>::mode_t mode3_t;
    typedef typename TraitUAMParam<F4>::mode_t mode4_t;
    typedef typename TraitUAMParam<F5>::mode_t mode5_t;
    
    typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
    typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
    typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
    typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
    typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
    
    typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
    typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
    typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
    typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
    typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
    
    void operator() ( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t ) {}
    void dummy_method_to_have_formal_param_type ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4, F5 f5 ){}
  };
};


// --------------------------------------------------------------------
/* Kaapi closure representation */
template<typename TraitUAMType1, typename TraitUAMType2, typename TraitUAMType3, typename TraitUAMType4, typename TraitUAMType5>
struct KaapiTaskArg5 { 
  typedef typename TraitUAMType1::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename TraitUAMType2::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename TraitUAMType3::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename TraitUAMType4::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename TraitUAMType5::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  
  inclosure1_t f1;
  inclosure2_t f2;
  inclosure3_t f3;
  inclosure4_t f4;
  inclosure5_t f5;
  
};


// --------------------------------------------------------------------
/* Body generators */
template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5>
struct KaapiCPUBody5 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5>
struct KaapiCPUBody5<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  
  typedef KaapiTaskArg5 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4, (formal5_t)args->f5);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5>
struct KaapiCPUBody5<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  
  typedef KaapiTaskArg5 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4,(formal5_t)args->f5);
  }
};


template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5>
struct KaapiGPUBody5 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5>
struct KaapiGPUBody5<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  
  typedef KaapiTaskArg5 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t> TaskArg_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4, (formal5_t)args->f5);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5>
struct KaapiGPUBody5<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  
  typedef KaapiTaskArg5 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t> TaskArg_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4,(formal5_t)args->f5);
  }
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5>
struct FormatClosure5 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  
  typedef KaapiTaskArg5 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t> TaskArg_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat() { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[5];
    static kaapi_offset_t        array_offset[5];
    static const kaapi_format_t* array_format[5];
    TaskArg_t* dummy;
    array_mode[1-1] = (kaapi_access_mode_t)TraitUAMParam_F1::mode_t::value;
    array_mode[2-1] = (kaapi_access_mode_t)TraitUAMParam_F2::mode_t::value;
    array_mode[3-1] = (kaapi_access_mode_t)TraitUAMParam_F3::mode_t::value;
    array_mode[4-1] = (kaapi_access_mode_t)TraitUAMParam_F4::mode_t::value;
    array_mode[5-1] = (kaapi_access_mode_t)TraitUAMParam_F5::mode_t::value;
    
    array_offset[1-1] = (char*)&dummy->f1 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f1); */
    array_offset[2-1] = (char*)&dummy->f2 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f2); */
    array_offset[3-1] = (char*)&dummy->f3 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f3); */
    array_offset[4-1] = (char*)&dummy->f4 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f4); */
    array_offset[5-1] = (char*)&dummy->f5 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f5); */
    
    array_format[1-1] = WrapperFormat<inclosure1_t>::get_format();
    array_format[2-1] = WrapperFormat<inclosure2_t>::get_format();
    array_format[3-1] = WrapperFormat<inclosure3_t>::get_format();
    array_format[4-1] = WrapperFormat<inclosure4_t>::get_format();
    array_format[5-1] = WrapperFormat<inclosure5_t>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(TASK).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(TaskArg_t),
          5,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5>
struct InitFormatClosure5 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t,formal5_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody5<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5>::body;
  }

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody5<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t,formal5_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody5<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody5<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5>::body;
  }

  static kaapi_format_t* registerbodies( kaapi_format_t* fmt, void (TASK::*method)( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t ) )
  {
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5>
kaapi_format_t FormatClosure5<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5>::format;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5>
kaapi_format_id_t FormatClosure5<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5>::fmid = 0;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5>
const kaapi_task_bodyid_t FormatClosure5<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5>::bodyid 
    = InitFormatClosure5<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5>::registerbodies(
          FormatClosure5<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5>::registerformat(), 
          &TASK::operator()
      )->bodyid;














// --------------------------------------------------------------------
/* 6 is the number of possible parameters */
template<>
struct Task<6> {
  template<class F1, class F2, class F3, class F4, class F5, class F6>
  struct Signature { 
    typedef typename TraitUAMParam<F1>::uamttype_t uamttype1_t;
    typedef typename TraitUAMParam<F2>::uamttype_t uamttype2_t;
    typedef typename TraitUAMParam<F3>::uamttype_t uamttype3_t;
    typedef typename TraitUAMParam<F4>::uamttype_t uamttype4_t;
    typedef typename TraitUAMParam<F5>::uamttype_t uamttype5_t;
    typedef typename TraitUAMParam<F6>::uamttype_t uamttype6_t;
    
    typedef typename TraitUAMParam<F1>::mode_t mode1_t;
    typedef typename TraitUAMParam<F2>::mode_t mode2_t;
    typedef typename TraitUAMParam<F3>::mode_t mode3_t;
    typedef typename TraitUAMParam<F4>::mode_t mode4_t;
    typedef typename TraitUAMParam<F5>::mode_t mode5_t;
    typedef typename TraitUAMParam<F6>::mode_t mode6_t;
    
    typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
    typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
    typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
    typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
    typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
    typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
    
    typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
    typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
    typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
    typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
    typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
    typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
    
    void operator() ( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t ) {}
    void dummy_method_to_have_formal_param_type ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6 ){}
  };
};


// --------------------------------------------------------------------
/* Kaapi closure representation */
template<typename TraitUAMType1, typename TraitUAMType2, typename TraitUAMType3, typename TraitUAMType4, typename TraitUAMType5, typename TraitUAMType6>
struct KaapiTaskArg6 { 
  typedef typename TraitUAMType1::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename TraitUAMType2::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename TraitUAMType3::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename TraitUAMType4::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename TraitUAMType5::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename TraitUAMType6::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  
  inclosure1_t f1;
  inclosure2_t f2;
  inclosure3_t f3;
  inclosure4_t f4;
  inclosure5_t f5;
  inclosure6_t f6;
  
};


// --------------------------------------------------------------------
/* Body generators */
template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6>
struct KaapiCPUBody6 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6>
struct KaapiCPUBody6<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  
  typedef KaapiTaskArg6 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4, (formal5_t)args->f5, (formal6_t)args->f6);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6>
struct KaapiCPUBody6<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  
  typedef KaapiTaskArg6 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4,(formal5_t)args->f5,(formal6_t)args->f6);
  }
};


template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6>
struct KaapiGPUBody6 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6>
struct KaapiGPUBody6<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  
  typedef KaapiTaskArg6 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t> TaskArg_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4, (formal5_t)args->f5, (formal6_t)args->f6);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6>
struct KaapiGPUBody6<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  
  typedef KaapiTaskArg6 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t> TaskArg_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4,(formal5_t)args->f5,(formal6_t)args->f6);
  }
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6>
struct FormatClosure6 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  
  typedef KaapiTaskArg6 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t> TaskArg_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat() { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[6];
    static kaapi_offset_t        array_offset[6];
    static const kaapi_format_t* array_format[6];
    TaskArg_t* dummy;
    array_mode[1-1] = (kaapi_access_mode_t)TraitUAMParam_F1::mode_t::value;
    array_mode[2-1] = (kaapi_access_mode_t)TraitUAMParam_F2::mode_t::value;
    array_mode[3-1] = (kaapi_access_mode_t)TraitUAMParam_F3::mode_t::value;
    array_mode[4-1] = (kaapi_access_mode_t)TraitUAMParam_F4::mode_t::value;
    array_mode[5-1] = (kaapi_access_mode_t)TraitUAMParam_F5::mode_t::value;
    array_mode[6-1] = (kaapi_access_mode_t)TraitUAMParam_F6::mode_t::value;
    
    array_offset[1-1] = (char*)&dummy->f1 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f1); */
    array_offset[2-1] = (char*)&dummy->f2 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f2); */
    array_offset[3-1] = (char*)&dummy->f3 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f3); */
    array_offset[4-1] = (char*)&dummy->f4 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f4); */
    array_offset[5-1] = (char*)&dummy->f5 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f5); */
    array_offset[6-1] = (char*)&dummy->f6 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f6); */
    
    array_format[1-1] = WrapperFormat<inclosure1_t>::get_format();
    array_format[2-1] = WrapperFormat<inclosure2_t>::get_format();
    array_format[3-1] = WrapperFormat<inclosure3_t>::get_format();
    array_format[4-1] = WrapperFormat<inclosure4_t>::get_format();
    array_format[5-1] = WrapperFormat<inclosure5_t>::get_format();
    array_format[6-1] = WrapperFormat<inclosure6_t>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(TASK).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(TaskArg_t),
          6,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6>
struct InitFormatClosure6 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t,formal5_t,formal6_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody6<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6>::body;
  }

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody6<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t,formal5_t,formal6_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody6<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody6<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6>::body;
  }

  static kaapi_format_t* registerbodies( kaapi_format_t* fmt, void (TASK::*method)( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t ) )
  {
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6>
kaapi_format_t FormatClosure6<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6>::format;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6>
kaapi_format_id_t FormatClosure6<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6>::fmid = 0;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6>
const kaapi_task_bodyid_t FormatClosure6<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6>::bodyid 
    = InitFormatClosure6<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6>::registerbodies(
          FormatClosure6<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6>::registerformat(), 
          &TASK::operator()
      )->bodyid;














// --------------------------------------------------------------------
/* 7 is the number of possible parameters */
template<>
struct Task<7> {
  template<class F1, class F2, class F3, class F4, class F5, class F6, class F7>
  struct Signature { 
    typedef typename TraitUAMParam<F1>::uamttype_t uamttype1_t;
    typedef typename TraitUAMParam<F2>::uamttype_t uamttype2_t;
    typedef typename TraitUAMParam<F3>::uamttype_t uamttype3_t;
    typedef typename TraitUAMParam<F4>::uamttype_t uamttype4_t;
    typedef typename TraitUAMParam<F5>::uamttype_t uamttype5_t;
    typedef typename TraitUAMParam<F6>::uamttype_t uamttype6_t;
    typedef typename TraitUAMParam<F7>::uamttype_t uamttype7_t;
    
    typedef typename TraitUAMParam<F1>::mode_t mode1_t;
    typedef typename TraitUAMParam<F2>::mode_t mode2_t;
    typedef typename TraitUAMParam<F3>::mode_t mode3_t;
    typedef typename TraitUAMParam<F4>::mode_t mode4_t;
    typedef typename TraitUAMParam<F5>::mode_t mode5_t;
    typedef typename TraitUAMParam<F6>::mode_t mode6_t;
    typedef typename TraitUAMParam<F7>::mode_t mode7_t;
    
    typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
    typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
    typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
    typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
    typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
    typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
    typedef typename uamttype7_t::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
    
    typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
    typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
    typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
    typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
    typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
    typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
    typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
    
    void operator() ( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t ) {}
    void dummy_method_to_have_formal_param_type ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7 ){}
  };
};


// --------------------------------------------------------------------
/* Kaapi closure representation */
template<typename TraitUAMType1, typename TraitUAMType2, typename TraitUAMType3, typename TraitUAMType4, typename TraitUAMType5, typename TraitUAMType6, typename TraitUAMType7>
struct KaapiTaskArg7 { 
  typedef typename TraitUAMType1::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename TraitUAMType2::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename TraitUAMType3::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename TraitUAMType4::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename TraitUAMType5::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename TraitUAMType6::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  typedef typename TraitUAMType7::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
  
  inclosure1_t f1;
  inclosure2_t f2;
  inclosure3_t f3;
  inclosure4_t f4;
  inclosure5_t f5;
  inclosure6_t f6;
  inclosure7_t f7;
  
};


// --------------------------------------------------------------------
/* Body generators */
template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7>
struct KaapiCPUBody7 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7>
struct KaapiCPUBody7<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  
  typedef KaapiTaskArg7 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4, (formal5_t)args->f5, (formal6_t)args->f6, (formal7_t)args->f7);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7>
struct KaapiCPUBody7<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  
  typedef KaapiTaskArg7 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4,(formal5_t)args->f5,(formal6_t)args->f6,(formal7_t)args->f7);
  }
};


template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7>
struct KaapiGPUBody7 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7>
struct KaapiGPUBody7<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  
  typedef KaapiTaskArg7 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t> TaskArg_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4, (formal5_t)args->f5, (formal6_t)args->f6, (formal7_t)args->f7);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7>
struct KaapiGPUBody7<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  
  typedef KaapiTaskArg7 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t> TaskArg_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4,(formal5_t)args->f5,(formal6_t)args->f6,(formal7_t)args->f7);
  }
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7>
struct FormatClosure7 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  typedef typename uamttype7_t::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
  
  typedef KaapiTaskArg7 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t> TaskArg_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat() { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[7];
    static kaapi_offset_t        array_offset[7];
    static const kaapi_format_t* array_format[7];
    TaskArg_t* dummy;
    array_mode[1-1] = (kaapi_access_mode_t)TraitUAMParam_F1::mode_t::value;
    array_mode[2-1] = (kaapi_access_mode_t)TraitUAMParam_F2::mode_t::value;
    array_mode[3-1] = (kaapi_access_mode_t)TraitUAMParam_F3::mode_t::value;
    array_mode[4-1] = (kaapi_access_mode_t)TraitUAMParam_F4::mode_t::value;
    array_mode[5-1] = (kaapi_access_mode_t)TraitUAMParam_F5::mode_t::value;
    array_mode[6-1] = (kaapi_access_mode_t)TraitUAMParam_F6::mode_t::value;
    array_mode[7-1] = (kaapi_access_mode_t)TraitUAMParam_F7::mode_t::value;
    
    array_offset[1-1] = (char*)&dummy->f1 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f1); */
    array_offset[2-1] = (char*)&dummy->f2 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f2); */
    array_offset[3-1] = (char*)&dummy->f3 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f3); */
    array_offset[4-1] = (char*)&dummy->f4 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f4); */
    array_offset[5-1] = (char*)&dummy->f5 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f5); */
    array_offset[6-1] = (char*)&dummy->f6 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f6); */
    array_offset[7-1] = (char*)&dummy->f7 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f7); */
    
    array_format[1-1] = WrapperFormat<inclosure1_t>::get_format();
    array_format[2-1] = WrapperFormat<inclosure2_t>::get_format();
    array_format[3-1] = WrapperFormat<inclosure3_t>::get_format();
    array_format[4-1] = WrapperFormat<inclosure4_t>::get_format();
    array_format[5-1] = WrapperFormat<inclosure5_t>::get_format();
    array_format[6-1] = WrapperFormat<inclosure6_t>::get_format();
    array_format[7-1] = WrapperFormat<inclosure7_t>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(TASK).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(TaskArg_t),
          7,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7>
struct InitFormatClosure7 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  typedef typename uamttype7_t::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t,formal5_t,formal6_t,formal7_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody7<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7>::body;
  }

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody7<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t,formal5_t,formal6_t,formal7_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody7<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody7<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7>::body;
  }

  static kaapi_format_t* registerbodies( kaapi_format_t* fmt, void (TASK::*method)( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t ) )
  {
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7>
kaapi_format_t FormatClosure7<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7>::format;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7>
kaapi_format_id_t FormatClosure7<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7>::fmid = 0;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7>
const kaapi_task_bodyid_t FormatClosure7<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7>::bodyid 
    = InitFormatClosure7<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7>::registerbodies(
          FormatClosure7<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7>::registerformat(), 
          &TASK::operator()
      )->bodyid;














// --------------------------------------------------------------------
/* 8 is the number of possible parameters */
template<>
struct Task<8> {
  template<class F1, class F2, class F3, class F4, class F5, class F6, class F7, class F8>
  struct Signature { 
    typedef typename TraitUAMParam<F1>::uamttype_t uamttype1_t;
    typedef typename TraitUAMParam<F2>::uamttype_t uamttype2_t;
    typedef typename TraitUAMParam<F3>::uamttype_t uamttype3_t;
    typedef typename TraitUAMParam<F4>::uamttype_t uamttype4_t;
    typedef typename TraitUAMParam<F5>::uamttype_t uamttype5_t;
    typedef typename TraitUAMParam<F6>::uamttype_t uamttype6_t;
    typedef typename TraitUAMParam<F7>::uamttype_t uamttype7_t;
    typedef typename TraitUAMParam<F8>::uamttype_t uamttype8_t;
    
    typedef typename TraitUAMParam<F1>::mode_t mode1_t;
    typedef typename TraitUAMParam<F2>::mode_t mode2_t;
    typedef typename TraitUAMParam<F3>::mode_t mode3_t;
    typedef typename TraitUAMParam<F4>::mode_t mode4_t;
    typedef typename TraitUAMParam<F5>::mode_t mode5_t;
    typedef typename TraitUAMParam<F6>::mode_t mode6_t;
    typedef typename TraitUAMParam<F7>::mode_t mode7_t;
    typedef typename TraitUAMParam<F8>::mode_t mode8_t;
    
    typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
    typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
    typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
    typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
    typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
    typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
    typedef typename uamttype7_t::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
    typedef typename uamttype8_t::template UAMParam<TYPE_INTASK>::type_t inclosure8_t;
    
    typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
    typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
    typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
    typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
    typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
    typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
    typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
    typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
    
    void operator() ( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t ) {}
    void dummy_method_to_have_formal_param_type ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8 ){}
  };
};


// --------------------------------------------------------------------
/* Kaapi closure representation */
template<typename TraitUAMType1, typename TraitUAMType2, typename TraitUAMType3, typename TraitUAMType4, typename TraitUAMType5, typename TraitUAMType6, typename TraitUAMType7, typename TraitUAMType8>
struct KaapiTaskArg8 { 
  typedef typename TraitUAMType1::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename TraitUAMType2::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename TraitUAMType3::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename TraitUAMType4::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename TraitUAMType5::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename TraitUAMType6::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  typedef typename TraitUAMType7::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
  typedef typename TraitUAMType8::template UAMParam<TYPE_INTASK>::type_t inclosure8_t;
  
  inclosure1_t f1;
  inclosure2_t f2;
  inclosure3_t f3;
  inclosure4_t f4;
  inclosure5_t f5;
  inclosure6_t f6;
  inclosure7_t f7;
  inclosure8_t f8;
  
};


// --------------------------------------------------------------------
/* Body generators */
template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8>
struct KaapiCPUBody8 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8>
struct KaapiCPUBody8<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7 , TraitUAMParam_F8> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  
  typedef KaapiTaskArg8 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4, (formal5_t)args->f5, (formal6_t)args->f6, (formal7_t)args->f7, (formal8_t)args->f8);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8>
struct KaapiCPUBody8<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7 , TraitUAMParam_F8> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  
  typedef KaapiTaskArg8 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4,(formal5_t)args->f5,(formal6_t)args->f6,(formal7_t)args->f7,(formal8_t)args->f8);
  }
};


template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8>
struct KaapiGPUBody8 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8>
struct KaapiGPUBody8<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7 , TraitUAMParam_F8> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  
  typedef KaapiTaskArg8 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t> TaskArg_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4, (formal5_t)args->f5, (formal6_t)args->f6, (formal7_t)args->f7, (formal8_t)args->f8);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8>
struct KaapiGPUBody8<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7 , TraitUAMParam_F8> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  
  typedef KaapiTaskArg8 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t> TaskArg_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4,(formal5_t)args->f5,(formal6_t)args->f6,(formal7_t)args->f7,(formal8_t)args->f8);
  }
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8>
struct FormatClosure8 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  typedef typename uamttype7_t::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
  typedef typename uamttype8_t::template UAMParam<TYPE_INTASK>::type_t inclosure8_t;
  
  typedef KaapiTaskArg8 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t> TaskArg_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat() { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[8];
    static kaapi_offset_t        array_offset[8];
    static const kaapi_format_t* array_format[8];
    TaskArg_t* dummy;
    array_mode[1-1] = (kaapi_access_mode_t)TraitUAMParam_F1::mode_t::value;
    array_mode[2-1] = (kaapi_access_mode_t)TraitUAMParam_F2::mode_t::value;
    array_mode[3-1] = (kaapi_access_mode_t)TraitUAMParam_F3::mode_t::value;
    array_mode[4-1] = (kaapi_access_mode_t)TraitUAMParam_F4::mode_t::value;
    array_mode[5-1] = (kaapi_access_mode_t)TraitUAMParam_F5::mode_t::value;
    array_mode[6-1] = (kaapi_access_mode_t)TraitUAMParam_F6::mode_t::value;
    array_mode[7-1] = (kaapi_access_mode_t)TraitUAMParam_F7::mode_t::value;
    array_mode[8-1] = (kaapi_access_mode_t)TraitUAMParam_F8::mode_t::value;
    
    array_offset[1-1] = (char*)&dummy->f1 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f1); */
    array_offset[2-1] = (char*)&dummy->f2 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f2); */
    array_offset[3-1] = (char*)&dummy->f3 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f3); */
    array_offset[4-1] = (char*)&dummy->f4 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f4); */
    array_offset[5-1] = (char*)&dummy->f5 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f5); */
    array_offset[6-1] = (char*)&dummy->f6 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f6); */
    array_offset[7-1] = (char*)&dummy->f7 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f7); */
    array_offset[8-1] = (char*)&dummy->f8 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f8); */
    
    array_format[1-1] = WrapperFormat<inclosure1_t>::get_format();
    array_format[2-1] = WrapperFormat<inclosure2_t>::get_format();
    array_format[3-1] = WrapperFormat<inclosure3_t>::get_format();
    array_format[4-1] = WrapperFormat<inclosure4_t>::get_format();
    array_format[5-1] = WrapperFormat<inclosure5_t>::get_format();
    array_format[6-1] = WrapperFormat<inclosure6_t>::get_format();
    array_format[7-1] = WrapperFormat<inclosure7_t>::get_format();
    array_format[8-1] = WrapperFormat<inclosure8_t>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(TASK).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(TaskArg_t),
          8,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8>
struct InitFormatClosure8 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  typedef typename uamttype7_t::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
  typedef typename uamttype8_t::template UAMParam<TYPE_INTASK>::type_t inclosure8_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t,formal5_t,formal6_t,formal7_t,formal8_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody8<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8>::body;
  }

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody8<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t,formal5_t,formal6_t,formal7_t,formal8_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody8<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody8<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8>::body;
  }

  static kaapi_format_t* registerbodies( kaapi_format_t* fmt, void (TASK::*method)( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t ) )
  {
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8>
kaapi_format_t FormatClosure8<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8>::format;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8>
kaapi_format_id_t FormatClosure8<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8>::fmid = 0;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8>
const kaapi_task_bodyid_t FormatClosure8<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8>::bodyid 
    = InitFormatClosure8<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8>::registerbodies(
          FormatClosure8<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8>::registerformat(), 
          &TASK::operator()
      )->bodyid;














// --------------------------------------------------------------------
/* 9 is the number of possible parameters */
template<>
struct Task<9> {
  template<class F1, class F2, class F3, class F4, class F5, class F6, class F7, class F8, class F9>
  struct Signature { 
    typedef typename TraitUAMParam<F1>::uamttype_t uamttype1_t;
    typedef typename TraitUAMParam<F2>::uamttype_t uamttype2_t;
    typedef typename TraitUAMParam<F3>::uamttype_t uamttype3_t;
    typedef typename TraitUAMParam<F4>::uamttype_t uamttype4_t;
    typedef typename TraitUAMParam<F5>::uamttype_t uamttype5_t;
    typedef typename TraitUAMParam<F6>::uamttype_t uamttype6_t;
    typedef typename TraitUAMParam<F7>::uamttype_t uamttype7_t;
    typedef typename TraitUAMParam<F8>::uamttype_t uamttype8_t;
    typedef typename TraitUAMParam<F9>::uamttype_t uamttype9_t;
    
    typedef typename TraitUAMParam<F1>::mode_t mode1_t;
    typedef typename TraitUAMParam<F2>::mode_t mode2_t;
    typedef typename TraitUAMParam<F3>::mode_t mode3_t;
    typedef typename TraitUAMParam<F4>::mode_t mode4_t;
    typedef typename TraitUAMParam<F5>::mode_t mode5_t;
    typedef typename TraitUAMParam<F6>::mode_t mode6_t;
    typedef typename TraitUAMParam<F7>::mode_t mode7_t;
    typedef typename TraitUAMParam<F8>::mode_t mode8_t;
    typedef typename TraitUAMParam<F9>::mode_t mode9_t;
    
    typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
    typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
    typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
    typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
    typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
    typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
    typedef typename uamttype7_t::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
    typedef typename uamttype8_t::template UAMParam<TYPE_INTASK>::type_t inclosure8_t;
    typedef typename uamttype9_t::template UAMParam<TYPE_INTASK>::type_t inclosure9_t;
    
    typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
    typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
    typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
    typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
    typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
    typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
    typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
    typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
    typedef typename uamttype9_t::template UAMParam<mode9_t>::type_t formal9_t;
    
    void operator() ( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t ) {}
    void dummy_method_to_have_formal_param_type ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9 ){}
  };
};


// --------------------------------------------------------------------
/* Kaapi closure representation */
template<typename TraitUAMType1, typename TraitUAMType2, typename TraitUAMType3, typename TraitUAMType4, typename TraitUAMType5, typename TraitUAMType6, typename TraitUAMType7, typename TraitUAMType8, typename TraitUAMType9>
struct KaapiTaskArg9 { 
  typedef typename TraitUAMType1::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename TraitUAMType2::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename TraitUAMType3::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename TraitUAMType4::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename TraitUAMType5::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename TraitUAMType6::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  typedef typename TraitUAMType7::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
  typedef typename TraitUAMType8::template UAMParam<TYPE_INTASK>::type_t inclosure8_t;
  typedef typename TraitUAMType9::template UAMParam<TYPE_INTASK>::type_t inclosure9_t;
  
  inclosure1_t f1;
  inclosure2_t f2;
  inclosure3_t f3;
  inclosure4_t f4;
  inclosure5_t f5;
  inclosure6_t f6;
  inclosure7_t f7;
  inclosure8_t f8;
  inclosure9_t f9;
  
};


// --------------------------------------------------------------------
/* Body generators */
template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9>
struct KaapiCPUBody9 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9>
struct KaapiCPUBody9<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7 , TraitUAMParam_F8 , TraitUAMParam_F9> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  typedef typename TraitUAMParam_F9::uamttype_t uamttype9_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  typedef typename TraitUAMParam_F9::mode_t mode9_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  typedef typename uamttype9_t::template UAMParam<mode9_t>::type_t formal9_t;
  
  typedef KaapiTaskArg9 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t,uamttype9_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4, (formal5_t)args->f5, (formal6_t)args->f6, (formal7_t)args->f7, (formal8_t)args->f8, (formal9_t)args->f9);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9>
struct KaapiCPUBody9<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7 , TraitUAMParam_F8 , TraitUAMParam_F9> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  typedef typename TraitUAMParam_F9::uamttype_t uamttype9_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  typedef typename TraitUAMParam_F9::mode_t mode9_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  typedef typename uamttype9_t::template UAMParam<mode9_t>::type_t formal9_t;
  
  typedef KaapiTaskArg9 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t,uamttype9_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4,(formal5_t)args->f5,(formal6_t)args->f6,(formal7_t)args->f7,(formal8_t)args->f8,(formal9_t)args->f9);
  }
};


template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9>
struct KaapiGPUBody9 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9>
struct KaapiGPUBody9<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7 , TraitUAMParam_F8 , TraitUAMParam_F9> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  typedef typename TraitUAMParam_F9::uamttype_t uamttype9_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  typedef typename TraitUAMParam_F9::mode_t mode9_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  typedef typename uamttype9_t::template UAMParam<mode9_t>::type_t formal9_t;
  
  typedef KaapiTaskArg9 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t,uamttype9_t> TaskArg_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4, (formal5_t)args->f5, (formal6_t)args->f6, (formal7_t)args->f7, (formal8_t)args->f8, (formal9_t)args->f9);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9>
struct KaapiGPUBody9<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7 , TraitUAMParam_F8 , TraitUAMParam_F9> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  typedef typename TraitUAMParam_F9::uamttype_t uamttype9_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  typedef typename TraitUAMParam_F9::mode_t mode9_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  typedef typename uamttype9_t::template UAMParam<mode9_t>::type_t formal9_t;
  
  typedef KaapiTaskArg9 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t,uamttype9_t> TaskArg_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4,(formal5_t)args->f5,(formal6_t)args->f6,(formal7_t)args->f7,(formal8_t)args->f8,(formal9_t)args->f9);
  }
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9>
struct FormatClosure9 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  typedef typename TraitUAMParam_F9::uamttype_t uamttype9_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  typedef typename uamttype7_t::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
  typedef typename uamttype8_t::template UAMParam<TYPE_INTASK>::type_t inclosure8_t;
  typedef typename uamttype9_t::template UAMParam<TYPE_INTASK>::type_t inclosure9_t;
  
  typedef KaapiTaskArg9 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t,uamttype9_t> TaskArg_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat() { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[9];
    static kaapi_offset_t        array_offset[9];
    static const kaapi_format_t* array_format[9];
    TaskArg_t* dummy;
    array_mode[1-1] = (kaapi_access_mode_t)TraitUAMParam_F1::mode_t::value;
    array_mode[2-1] = (kaapi_access_mode_t)TraitUAMParam_F2::mode_t::value;
    array_mode[3-1] = (kaapi_access_mode_t)TraitUAMParam_F3::mode_t::value;
    array_mode[4-1] = (kaapi_access_mode_t)TraitUAMParam_F4::mode_t::value;
    array_mode[5-1] = (kaapi_access_mode_t)TraitUAMParam_F5::mode_t::value;
    array_mode[6-1] = (kaapi_access_mode_t)TraitUAMParam_F6::mode_t::value;
    array_mode[7-1] = (kaapi_access_mode_t)TraitUAMParam_F7::mode_t::value;
    array_mode[8-1] = (kaapi_access_mode_t)TraitUAMParam_F8::mode_t::value;
    array_mode[9-1] = (kaapi_access_mode_t)TraitUAMParam_F9::mode_t::value;
    
    array_offset[1-1] = (char*)&dummy->f1 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f1); */
    array_offset[2-1] = (char*)&dummy->f2 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f2); */
    array_offset[3-1] = (char*)&dummy->f3 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f3); */
    array_offset[4-1] = (char*)&dummy->f4 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f4); */
    array_offset[5-1] = (char*)&dummy->f5 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f5); */
    array_offset[6-1] = (char*)&dummy->f6 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f6); */
    array_offset[7-1] = (char*)&dummy->f7 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f7); */
    array_offset[8-1] = (char*)&dummy->f8 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f8); */
    array_offset[9-1] = (char*)&dummy->f9 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f9); */
    
    array_format[1-1] = WrapperFormat<inclosure1_t>::get_format();
    array_format[2-1] = WrapperFormat<inclosure2_t>::get_format();
    array_format[3-1] = WrapperFormat<inclosure3_t>::get_format();
    array_format[4-1] = WrapperFormat<inclosure4_t>::get_format();
    array_format[5-1] = WrapperFormat<inclosure5_t>::get_format();
    array_format[6-1] = WrapperFormat<inclosure6_t>::get_format();
    array_format[7-1] = WrapperFormat<inclosure7_t>::get_format();
    array_format[8-1] = WrapperFormat<inclosure8_t>::get_format();
    array_format[9-1] = WrapperFormat<inclosure9_t>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(TASK).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(TaskArg_t),
          9,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9>
struct InitFormatClosure9 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  typedef typename TraitUAMParam_F9::uamttype_t uamttype9_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  typedef typename TraitUAMParam_F9::mode_t mode9_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  typedef typename uamttype7_t::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
  typedef typename uamttype8_t::template UAMParam<TYPE_INTASK>::type_t inclosure8_t;
  typedef typename uamttype9_t::template UAMParam<TYPE_INTASK>::type_t inclosure9_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  typedef typename uamttype9_t::template UAMParam<mode9_t>::type_t formal9_t;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t,formal5_t,formal6_t,formal7_t,formal8_t,formal9_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody9<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9>::body;
  }

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody9<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t,formal5_t,formal6_t,formal7_t,formal8_t,formal9_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody9<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody9<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9>::body;
  }

  static kaapi_format_t* registerbodies( kaapi_format_t* fmt, void (TASK::*method)( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t ) )
  {
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9>
kaapi_format_t FormatClosure9<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9>::format;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9>
kaapi_format_id_t FormatClosure9<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9>::fmid = 0;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9>
const kaapi_task_bodyid_t FormatClosure9<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9>::bodyid 
    = InitFormatClosure9<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9>::registerbodies(
          FormatClosure9<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9>::registerformat(), 
          &TASK::operator()
      )->bodyid;














// --------------------------------------------------------------------
/* 10 is the number of possible parameters */
template<>
struct Task<10> {
  template<class F1, class F2, class F3, class F4, class F5, class F6, class F7, class F8, class F9, class F10>
  struct Signature { 
    typedef typename TraitUAMParam<F1>::uamttype_t uamttype1_t;
    typedef typename TraitUAMParam<F2>::uamttype_t uamttype2_t;
    typedef typename TraitUAMParam<F3>::uamttype_t uamttype3_t;
    typedef typename TraitUAMParam<F4>::uamttype_t uamttype4_t;
    typedef typename TraitUAMParam<F5>::uamttype_t uamttype5_t;
    typedef typename TraitUAMParam<F6>::uamttype_t uamttype6_t;
    typedef typename TraitUAMParam<F7>::uamttype_t uamttype7_t;
    typedef typename TraitUAMParam<F8>::uamttype_t uamttype8_t;
    typedef typename TraitUAMParam<F9>::uamttype_t uamttype9_t;
    typedef typename TraitUAMParam<F10>::uamttype_t uamttype10_t;
    
    typedef typename TraitUAMParam<F1>::mode_t mode1_t;
    typedef typename TraitUAMParam<F2>::mode_t mode2_t;
    typedef typename TraitUAMParam<F3>::mode_t mode3_t;
    typedef typename TraitUAMParam<F4>::mode_t mode4_t;
    typedef typename TraitUAMParam<F5>::mode_t mode5_t;
    typedef typename TraitUAMParam<F6>::mode_t mode6_t;
    typedef typename TraitUAMParam<F7>::mode_t mode7_t;
    typedef typename TraitUAMParam<F8>::mode_t mode8_t;
    typedef typename TraitUAMParam<F9>::mode_t mode9_t;
    typedef typename TraitUAMParam<F10>::mode_t mode10_t;
    
    typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
    typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
    typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
    typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
    typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
    typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
    typedef typename uamttype7_t::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
    typedef typename uamttype8_t::template UAMParam<TYPE_INTASK>::type_t inclosure8_t;
    typedef typename uamttype9_t::template UAMParam<TYPE_INTASK>::type_t inclosure9_t;
    typedef typename uamttype10_t::template UAMParam<TYPE_INTASK>::type_t inclosure10_t;
    
    typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
    typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
    typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
    typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
    typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
    typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
    typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
    typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
    typedef typename uamttype9_t::template UAMParam<mode9_t>::type_t formal9_t;
    typedef typename uamttype10_t::template UAMParam<mode10_t>::type_t formal10_t;
    
    void operator() ( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t, formal10_t ) {}
    void dummy_method_to_have_formal_param_type ( Thread* thread , F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9, F10 f10 ){}
  };
};


// --------------------------------------------------------------------
/* Kaapi closure representation */
template<typename TraitUAMType1, typename TraitUAMType2, typename TraitUAMType3, typename TraitUAMType4, typename TraitUAMType5, typename TraitUAMType6, typename TraitUAMType7, typename TraitUAMType8, typename TraitUAMType9, typename TraitUAMType10>
struct KaapiTaskArg10 { 
  typedef typename TraitUAMType1::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename TraitUAMType2::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename TraitUAMType3::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename TraitUAMType4::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename TraitUAMType5::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename TraitUAMType6::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  typedef typename TraitUAMType7::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
  typedef typename TraitUAMType8::template UAMParam<TYPE_INTASK>::type_t inclosure8_t;
  typedef typename TraitUAMType9::template UAMParam<TYPE_INTASK>::type_t inclosure9_t;
  typedef typename TraitUAMType10::template UAMParam<TYPE_INTASK>::type_t inclosure10_t;
  
  inclosure1_t f1;
  inclosure2_t f2;
  inclosure3_t f3;
  inclosure4_t f4;
  inclosure5_t f5;
  inclosure6_t f6;
  inclosure7_t f7;
  inclosure8_t f8;
  inclosure9_t f9;
  inclosure10_t f10;
  
};


// --------------------------------------------------------------------
/* Body generators */
template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9 ,typename TraitUAMParam_F10>
struct KaapiCPUBody10 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9 ,typename TraitUAMParam_F10>
struct KaapiCPUBody10<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7 , TraitUAMParam_F8 , TraitUAMParam_F9 , TraitUAMParam_F10> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  typedef typename TraitUAMParam_F9::uamttype_t uamttype9_t;
  typedef typename TraitUAMParam_F10::uamttype_t uamttype10_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  typedef typename TraitUAMParam_F9::mode_t mode9_t;
  typedef typename TraitUAMParam_F10::mode_t mode10_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  typedef typename uamttype9_t::template UAMParam<mode9_t>::type_t formal9_t;
  typedef typename uamttype10_t::template UAMParam<mode10_t>::type_t formal10_t;
  
  typedef KaapiTaskArg10 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t,uamttype9_t,uamttype10_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4, (formal5_t)args->f5, (formal6_t)args->f6, (formal7_t)args->f7, (formal8_t)args->f8, (formal9_t)args->f9, (formal10_t)args->f10);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9 ,typename TraitUAMParam_F10>
struct KaapiCPUBody10<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7 , TraitUAMParam_F8 , TraitUAMParam_F9 , TraitUAMParam_F10> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  typedef typename TraitUAMParam_F9::uamttype_t uamttype9_t;
  typedef typename TraitUAMParam_F10::uamttype_t uamttype10_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  typedef typename TraitUAMParam_F9::mode_t mode9_t;
  typedef typename TraitUAMParam_F10::mode_t mode10_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  typedef typename uamttype9_t::template UAMParam<mode9_t>::type_t formal9_t;
  typedef typename uamttype10_t::template UAMParam<mode10_t>::type_t formal10_t;
  
  typedef KaapiTaskArg10 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t,uamttype9_t,uamttype10_t> TaskArg_t;

  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyCPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4,(formal5_t)args->f5,(formal6_t)args->f6,(formal7_t)args->f7,(formal8_t)args->f8,(formal9_t)args->f9,(formal10_t)args->f10);
  }
};


template<bool hasstackparam, class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9 ,typename TraitUAMParam_F10>
struct KaapiGPUBody10 {};


/* Kaapi binder to call task with stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9 ,typename TraitUAMParam_F10>
struct KaapiGPUBody10<true, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7 , TraitUAMParam_F8 , TraitUAMParam_F9 , TraitUAMParam_F10> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  typedef typename TraitUAMParam_F9::uamttype_t uamttype9_t;
  typedef typename TraitUAMParam_F10::uamttype_t uamttype10_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  typedef typename TraitUAMParam_F9::mode_t mode9_t;
  typedef typename TraitUAMParam_F10::mode_t mode10_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  typedef typename uamttype9_t::template UAMParam<mode9_t>::type_t formal9_t;
  typedef typename uamttype10_t::template UAMParam<mode10_t>::type_t formal10_t;
  
  typedef KaapiTaskArg10 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t,uamttype9_t,uamttype10_t> TaskArg_t;

  /* with stack parameters */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (Thread*)stack , (formal1_t)args->f1, (formal2_t)args->f2, (formal3_t)args->f3, (formal4_t)args->f4, (formal5_t)args->f5, (formal6_t)args->f6, (formal7_t)args->f7, (formal8_t)args->f8, (formal9_t)args->f9, (formal10_t)args->f10);
  }
};


/* Kaapi binder to call task without stack args */
template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9 ,typename TraitUAMParam_F10>
struct KaapiGPUBody10<false, TASK , TraitUAMParam_F1 , TraitUAMParam_F2 , TraitUAMParam_F3 , TraitUAMParam_F4 , TraitUAMParam_F5 , TraitUAMParam_F6 , TraitUAMParam_F7 , TraitUAMParam_F8 , TraitUAMParam_F9 , TraitUAMParam_F10> {
  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  typedef typename TraitUAMParam_F9::uamttype_t uamttype9_t;
  typedef typename TraitUAMParam_F10::uamttype_t uamttype10_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  typedef typename TraitUAMParam_F9::mode_t mode9_t;
  typedef typename TraitUAMParam_F10::mode_t mode10_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  typedef typename uamttype9_t::template UAMParam<mode9_t>::type_t formal9_t;
  typedef typename uamttype10_t::template UAMParam<mode10_t>::type_t formal10_t;
  
  typedef KaapiTaskArg10 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t,uamttype9_t,uamttype10_t> TaskArg_t;

  /* */
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TaskBodyGPU<TASK> dummy;
    TaskArg_t* args = kaapi_task_getargst(t, TaskArg_t);
    dummy( (formal1_t)args->f1,(formal2_t)args->f2,(formal3_t)args->f3,(formal4_t)args->f4,(formal5_t)args->f5,(formal6_t)args->f6,(formal7_t)args->f7,(formal8_t)args->f8,(formal9_t)args->f9,(formal10_t)args->f10);
  }
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9 ,typename TraitUAMParam_F10>
struct FormatClosure10 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  typedef typename TraitUAMParam_F9::uamttype_t uamttype9_t;
  typedef typename TraitUAMParam_F10::uamttype_t uamttype10_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  typedef typename uamttype7_t::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
  typedef typename uamttype8_t::template UAMParam<TYPE_INTASK>::type_t inclosure8_t;
  typedef typename uamttype9_t::template UAMParam<TYPE_INTASK>::type_t inclosure9_t;
  typedef typename uamttype10_t::template UAMParam<TYPE_INTASK>::type_t inclosure10_t;
  
  typedef KaapiTaskArg10 <uamttype1_t,uamttype2_t,uamttype3_t,uamttype4_t,uamttype5_t,uamttype6_t,uamttype7_t,uamttype8_t,uamttype9_t,uamttype10_t> TaskArg_t;

  static kaapi_format_t    format;
  static kaapi_format_id_t fmid;
  static kaapi_format_t*   getformat() { return &format; }
  
  static kaapi_format_t* registerformat()
  {
    if (fmid != 0) return &format;
    
    static kaapi_access_mode_t   array_mode[10];
    static kaapi_offset_t        array_offset[10];
    static const kaapi_format_t* array_format[10];
    TaskArg_t* dummy;
    array_mode[1-1] = (kaapi_access_mode_t)TraitUAMParam_F1::mode_t::value;
    array_mode[2-1] = (kaapi_access_mode_t)TraitUAMParam_F2::mode_t::value;
    array_mode[3-1] = (kaapi_access_mode_t)TraitUAMParam_F3::mode_t::value;
    array_mode[4-1] = (kaapi_access_mode_t)TraitUAMParam_F4::mode_t::value;
    array_mode[5-1] = (kaapi_access_mode_t)TraitUAMParam_F5::mode_t::value;
    array_mode[6-1] = (kaapi_access_mode_t)TraitUAMParam_F6::mode_t::value;
    array_mode[7-1] = (kaapi_access_mode_t)TraitUAMParam_F7::mode_t::value;
    array_mode[8-1] = (kaapi_access_mode_t)TraitUAMParam_F8::mode_t::value;
    array_mode[9-1] = (kaapi_access_mode_t)TraitUAMParam_F9::mode_t::value;
    array_mode[10-1] = (kaapi_access_mode_t)TraitUAMParam_F10::mode_t::value;
    
    array_offset[1-1] = (char*)&dummy->f1 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f1); */
    array_offset[2-1] = (char*)&dummy->f2 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f2); */
    array_offset[3-1] = (char*)&dummy->f3 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f3); */
    array_offset[4-1] = (char*)&dummy->f4 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f4); */
    array_offset[5-1] = (char*)&dummy->f5 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f5); */
    array_offset[6-1] = (char*)&dummy->f6 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f6); */
    array_offset[7-1] = (char*)&dummy->f7 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f7); */
    array_offset[8-1] = (char*)&dummy->f8 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f8); */
    array_offset[9-1] = (char*)&dummy->f9 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f9); */
    array_offset[10-1] = (char*)&dummy->f10 - (char*)dummy; /* BUG ? offsetof(TaskArg_t, f10); */
    
    array_format[1-1] = WrapperFormat<inclosure1_t>::get_format();
    array_format[2-1] = WrapperFormat<inclosure2_t>::get_format();
    array_format[3-1] = WrapperFormat<inclosure3_t>::get_format();
    array_format[4-1] = WrapperFormat<inclosure4_t>::get_format();
    array_format[5-1] = WrapperFormat<inclosure5_t>::get_format();
    array_format[6-1] = WrapperFormat<inclosure6_t>::get_format();
    array_format[7-1] = WrapperFormat<inclosure7_t>::get_format();
    array_format[8-1] = WrapperFormat<inclosure8_t>::get_format();
    array_format[9-1] = WrapperFormat<inclosure9_t>::get_format();
    array_format[10-1] = WrapperFormat<inclosure10_t>::get_format();
    
    static std::string task_name = std::string("__Z")+std::string(typeid(TASK).name());
    fmid = kaapi_format_taskregister( 
          &getformat, 
          -1, 
          0, 
          task_name.c_str(),
          sizeof(TaskArg_t),
          10,
          array_mode,
          array_offset,
          array_format
      );
    return &format;
  }
  /* */
  static const kaapi_task_bodyid_t bodyid;
};


template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9 ,typename TraitUAMParam_F10>
struct InitFormatClosure10 {

  typedef typename TraitUAMParam_F1::uamttype_t uamttype1_t;
  typedef typename TraitUAMParam_F2::uamttype_t uamttype2_t;
  typedef typename TraitUAMParam_F3::uamttype_t uamttype3_t;
  typedef typename TraitUAMParam_F4::uamttype_t uamttype4_t;
  typedef typename TraitUAMParam_F5::uamttype_t uamttype5_t;
  typedef typename TraitUAMParam_F6::uamttype_t uamttype6_t;
  typedef typename TraitUAMParam_F7::uamttype_t uamttype7_t;
  typedef typename TraitUAMParam_F8::uamttype_t uamttype8_t;
  typedef typename TraitUAMParam_F9::uamttype_t uamttype9_t;
  typedef typename TraitUAMParam_F10::uamttype_t uamttype10_t;
  
  typedef typename TraitUAMParam_F1::mode_t mode1_t;
  typedef typename TraitUAMParam_F2::mode_t mode2_t;
  typedef typename TraitUAMParam_F3::mode_t mode3_t;
  typedef typename TraitUAMParam_F4::mode_t mode4_t;
  typedef typename TraitUAMParam_F5::mode_t mode5_t;
  typedef typename TraitUAMParam_F6::mode_t mode6_t;
  typedef typename TraitUAMParam_F7::mode_t mode7_t;
  typedef typename TraitUAMParam_F8::mode_t mode8_t;
  typedef typename TraitUAMParam_F9::mode_t mode9_t;
  typedef typename TraitUAMParam_F10::mode_t mode10_t;
  
  typedef typename uamttype1_t::template UAMParam<TYPE_INTASK>::type_t inclosure1_t;
  typedef typename uamttype2_t::template UAMParam<TYPE_INTASK>::type_t inclosure2_t;
  typedef typename uamttype3_t::template UAMParam<TYPE_INTASK>::type_t inclosure3_t;
  typedef typename uamttype4_t::template UAMParam<TYPE_INTASK>::type_t inclosure4_t;
  typedef typename uamttype5_t::template UAMParam<TYPE_INTASK>::type_t inclosure5_t;
  typedef typename uamttype6_t::template UAMParam<TYPE_INTASK>::type_t inclosure6_t;
  typedef typename uamttype7_t::template UAMParam<TYPE_INTASK>::type_t inclosure7_t;
  typedef typename uamttype8_t::template UAMParam<TYPE_INTASK>::type_t inclosure8_t;
  typedef typename uamttype9_t::template UAMParam<TYPE_INTASK>::type_t inclosure9_t;
  typedef typename uamttype10_t::template UAMParam<TYPE_INTASK>::type_t inclosure10_t;
  
  typedef typename uamttype1_t::template UAMParam<mode1_t>::type_t formal1_t;
  typedef typename uamttype2_t::template UAMParam<mode2_t>::type_t formal2_t;
  typedef typename uamttype3_t::template UAMParam<mode3_t>::type_t formal3_t;
  typedef typename uamttype4_t::template UAMParam<mode4_t>::type_t formal4_t;
  typedef typename uamttype5_t::template UAMParam<mode5_t>::type_t formal5_t;
  typedef typename uamttype6_t::template UAMParam<mode6_t>::type_t formal6_t;
  typedef typename uamttype7_t::template UAMParam<mode7_t>::type_t formal7_t;
  typedef typename uamttype8_t::template UAMParam<mode8_t>::type_t formal8_t;
  typedef typename uamttype9_t::template UAMParam<mode9_t>::type_t formal9_t;
  typedef typename uamttype10_t::template UAMParam<mode10_t>::type_t formal10_t;
  

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t,formal5_t,formal6_t,formal7_t,formal8_t,formal9_t,formal10_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t, formal10_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody10<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9 ,TraitUAMParam_F10>::body;
  }

  static kaapi_task_body_t registercpubody( kaapi_format_t* fmt, void (TaskBodyCPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t, formal10_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t, formal10_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiCPUBody10<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9 ,TraitUAMParam_F10>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( formal1_t,formal2_t,formal3_t,formal4_t,formal5_t,formal6_t,formal7_t,formal8_t,formal9_t,formal10_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t, formal10_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody10<false, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9 ,TraitUAMParam_F10>::body;
  }

  static kaapi_task_body_t registergpubody( kaapi_format_t* fmt, void (TaskBodyGPU<TASK>::*method)( Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t, formal10_t ) )
  {
    typedef void (TASK::*type_default_t)(Thread* , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t, formal10_t);
    type_default_t f_default = &TASK::operator();
    if ((type_default_t)method == f_default) return 0;
    return &KaapiGPUBody10<true, TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9 ,TraitUAMParam_F10>::body;
  }

  static kaapi_format_t* registerbodies( kaapi_format_t* fmt, void (TASK::*method)( Thread* thread , formal1_t, formal2_t, formal3_t, formal4_t, formal5_t, formal6_t, formal7_t, formal8_t, formal9_t, formal10_t ) )
  {
    fmt->entrypoint[KAAPI_PROC_TYPE_CPU] = registercpubody( fmt, &TaskBodyCPU<TASK>::operator() );
    fmt->entrypoint[KAAPI_PROC_TYPE_GPU] = registergpubody( fmt, &TaskBodyGPU<TASK>::operator() );
    kaapi_bodies[fmt->bodyid] = fmt->entrypoint[KAAPI_PROC_TYPE_CPU];
    return fmt;
  }
};

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9 ,typename TraitUAMParam_F10>
kaapi_format_t FormatClosure10<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9 ,TraitUAMParam_F10>::format;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9 ,typename TraitUAMParam_F10>
kaapi_format_id_t FormatClosure10<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9 ,TraitUAMParam_F10>::fmid = 0;

template<class TASK ,typename TraitUAMParam_F1 ,typename TraitUAMParam_F2 ,typename TraitUAMParam_F3 ,typename TraitUAMParam_F4 ,typename TraitUAMParam_F5 ,typename TraitUAMParam_F6 ,typename TraitUAMParam_F7 ,typename TraitUAMParam_F8 ,typename TraitUAMParam_F9 ,typename TraitUAMParam_F10>
const kaapi_task_bodyid_t FormatClosure10<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9 ,TraitUAMParam_F10>::bodyid 
    = InitFormatClosure10<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9 ,TraitUAMParam_F10>::registerbodies(
          FormatClosure10<TASK ,TraitUAMParam_F1 ,TraitUAMParam_F2 ,TraitUAMParam_F3 ,TraitUAMParam_F4 ,TraitUAMParam_F5 ,TraitUAMParam_F6 ,TraitUAMParam_F7 ,TraitUAMParam_F8 ,TraitUAMParam_F9 ,TraitUAMParam_F10>::registerformat(), 
          &TASK::operator()
      )->bodyid;

