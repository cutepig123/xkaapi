@c -------------------
@node API
@chapter X-Kaapi C++ Application Programming Interface

This is a quick reference to most classes and functions defined in the
header @file{<kaapi++>}.
Do not forget to had
@example
    #include <kaapi++>
    using namespace ka; // optional
@end example
to your source code !

@menu
The must have
* tasksig:: @code{ka::Task<...>::Signature<...>} and @code{ka::TaskBodyCPU<...>}
* spawn:: @code{ka::Spawn<...>(...)(...)}
* shared:: @code{ka::pointer[_MODE]<T>}
* utilities:: useful functions
@end menu

@menu
And the sometimes useful
@c * monotonic bound:: @code{a1::MonotonicBound}
* synchronized blocks::@code{a1::SyncGuard}
* algorithms:: various algorithms ported from the @acronym{STL,Standard Template Library}
@c * utilities:: timers, loggers, resize_vector ...
@c * dynamically loaded modules:: external modules that can be loaded dynamically
@end menu
@c * remote iterator:: @code{a1::remote}, @code{a1::const_remote}, @code{a1::init}, @code{a1::fetch}

@c -------------------
@node tasksig
@section Task

@table @strong
@c ---
@item Declaration of the signature
Any task should defines a signature. A signature is inherited from @code{ka::Task<..>::Signature}.
Once a signature is given, a task could be created, but nothing is executed if no implementation of the
task is given.

Let us consider a task @code{TaskRead} that read one shared object of type T, for instance in order to print the value. The programmer 
should defines the signature of @code{TaskRead} as the following:
@example
struct TaskRead : ka::Task<1>::Signature<ka::R<T> > @{ @};
@end example
The first parameter of the template definition @code{ka::Task} is an integer that specifies the number of parameters.

The other access mode that can be used to define signature of task are:
@itemize
@item @code{ka::W<T>}: to specify that the task will write the parameter of type T.
@item @code{ka::RW<T>}: to specify that the task will both read and write the parameter of type T.
@item @code{ka::Value<T>}: to specify that the task will take the parameter of type T passed by value.
@end itemize 


@item Definition of the entry point
Once the signature of a task signature is declared, the programmer should given implementation of the
task for a specific kind of ressource: for instance if the programmer wants to run its program on a multicore
using only CPU as computing ressource, it should specialized the implementation for CPU as the following.
Let us consider our previous @code{TaskRead}:
@example
template<>
struct TaskBodyCPU<TaskRead>
@{
  void operator() ( ka::pointer_r<T> res )
  @{
    std::cout << "Hello, I'm reading value: " << *res << std::endl;
  @}
@};
@end example

X-Kaapi allows you to define several body's implementations of a same task.
For instance, if you want to use heterogeneous computer such as a multicore with GPUs.
In that case, the programmer can only specifies CPU and GPU implementations which allow the runtime to automatically schedule
instances of this task on CPU or one GPU depending on the activity.
@end table

@c -------------------
@node spawn
@section Spawn

@table @strong
@c ---
@item Declaration

@example
template<class @var{Task}, class @var{Attribute} >
class Spawn
@{
    Spawn(Attribute = DefaultAttribut );

    void operator()( ... );
@};
@end example


@c ---
@item Template parameters

@vtable @var

@item Task
This template parameter is used to know which task will be spawned.
It must implement signature @code{ka::Task<..>::Signature<...>} that describes the access mode of each parameter.
The parameters of the @code{Spawn} method @code{operator()} are the same as the @code{operator()} from @var{Task}.

@item Attribute
This template parameter is never specified direclty. Instead, it is deduced from the call to the @code{Spawn} constructor.
The class given can chage the bahavior of the spawned task. Possible values are

@vtable @var
@item DefaultAttribute
The default behavior, nothing particular
@c @item SetLocal
@c Force the forked task to be executed locally
@end vtable

@end vtable

@c ---
@item Methods


@ftable @code
@item Spawn(Attribute = DefaultAttribut)
The constructor of the @code{Spawn} class.
It is always used to construct a temporary object, from which you call the  @code{operator()} method.
The @code{Attribute} parameter determines the behavior of forked task, as described before.

@item void operator() (...)
The parameters of the method @code{operator()} are the same as the @code{operator()} from @var{Task}.
This method spawns a task of type @var{Task} into the local stack, waiting to be executed by current process, or to be stolen by a remote process.

@end ftable

@end table

@c -------------------
@node shared
@section Shared objects between tasks

@ftable @code

@c ---
In the old Athapascan API, an object that will be shared between 2 tasks should be define as a shared object with a specific keyword. 
In the new C++ Kaapi interface two tasks shared a same object if and only if they shared they have the same pointer (to the same object)
as an effective parameter.

At runtime, the task body access to the object through a @code{ka::pointer} object. Depending on the access mode (read, write, read/write), the @code{ka::pointer} could be read, write or modified (read and write). The following declarations specifies the semantic of indirection operator on a shared object.

@table @strong
@item @code{ka::pointer_r<T>} a
@itemize
  @item @code{*a} is of type @code{const T&}
@end itemize

@item @code{ka::pointer_w<T>} a
@itemize
  @item @code{*a} is of type @code{ka::pointer_w<T>::value_ref} that can be assigned to any @code{T}
@end itemize

@item @code{ka::pointer_rw<T>} a
@itemize
  @item @code{*a} is of type @code{ka::pointer_w<T>::value_ref} that can be assigned to any @code{T} or converted to any @code{const T&}
@end itemize

@end table
@end ftable


-------------------
@node synchronized blocks
@section SyncGuard

@table @strong
@item Declaration
@example
class SyncGuard
@{
    SyncGuard();
    ~SyncGuard();
@};
@end example

@item Methods

@ftable @code
@item SyncGuard()
Constructor of the class.
When an object of class @code{ka::SyncGuard} is created, it creates a special frame in which all further tasks will be spawned.
When the object is destroyed, the frame is closed and all generated tasks are executed.

@item ~SyncGuard()
Destructor of the class.
When called, it forces the execution of all tasks in its frame.
This method only returns when  all tasks (and children) have been executed.
@end ftable

@end table


@c -------------------
@node algorithms
@section Algorithms

Most of the STL algorithms have been parallelized on top of X-Kaapi runtime. 
HERE : une liste des algorithmes parallelised.

@c -------------
@node utilities
@section Utilities

@ftable @code

@item ka::logfile()
manage logs.
@table @strong
@item Description
@example
std::ostream& logfile();
@end example

@item Return Value
returns a @code{std::ostream} reference that can be used to print out any kind of text.
The text will be forwrded to the master node and displayed with a smaal header containing information about
@itemize
@item the global id of the source node
@item the date when the log was taken (according to local clock)
@end itemize
@end table


@item kaapi_get_elapsedtime()
take the elapsed time
@table @strong
@item Description
@example
double kaapi_get_elapsedtime();
@end example
@item Return Value
time since the birth of Unix in seconds
@end table

@end ftable

@c  @include doc/kaapi/dlm.texi
