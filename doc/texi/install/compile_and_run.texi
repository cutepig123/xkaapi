@node compile and run
@chapter Compile and Run Athapascan programs

This chapter details the basic steps needed to compile a source code linked with @code{X-Kaapi},
and how to run it.
@menu
* compile::Compiling Athapascan program
* run::Running Athapascan program
@end menu

@node compile
@section Compiling Athapascan program

Once @code{X-Kaapi} is installed (see @ref{install guide}), there are two ways to compile an @code{X-Kaapi} or @code{Athapascan} program.
You can either use the help of the pkg-config program if you have it installed or
you can use environment variables.

@menu
* setting environment:: if @code{X-Kaapi} is not installed in default location
* compile with pkg-config:: the modern way
* compile with environment variables:: the old way
@end menu

@node setting environment
@subsection Setting up an environment to compile X-Kaapi programs

If you use environment variables or if X-Kaapi is not installed in system
directories (usually if you did not use the ``--prefix=/usr`` with the configure
script), you need to setup your environment.

You can either start a new shell
@example
$ $HOME/kaapi/bin/kaapish --mode=devel --flags
$ # replace $HOME/kaapi by the prefix used with the configure script
@end example

or you can add environment variables in the current shell
@example
$ eval `$HOME/kaapi/bin/kaapish --shell --mode=devel --flags`
$ # replace $HOME/kaapi by the prefix used with the configure script
@end example


In the latter case (adding to the current environment), you can add
the line in your shell rc file (@file{.bashrc}, @file{.tcshrc}, ...) to avoid to
type it each time.

If @command{kaapish} does not correctly detect your kind of shell, you can specify it
@example
$ eval `$HOME/kaapi/bin/kaapish --shell=sh --mode=devel --flags`
$ # replace $HOME/kaapi by the prefix used with the configure script
@end example


More detail about the @command{kaapish} command can be found in its man page kaapish(1)

@node compile with pkg-config
@subsection Using the pkg-config tool


Once you setup an correct environment or if you installed X-Kaapi in system
directories (usually if you use the @option{--prefix=/usr} with the configure script),
you can compile and link with the correct flags by requesting them to
@command{pkg-config} as for any other library managed by @command{pkg-config}:
@example
$ g++ -c kaapi_test.cpp `pkg-config --cflags kaapi` # compiling step
$ g++ -o kaapi_test kaapi_test.o `pkg-config --libs kaapi` # linking step
@end example

@node compile with environment variables
@subsection Using environment variables


Once you setup an correct environment, you can compile and link with the
correct flags by using the new defined environment variables:
@example
$ g++ -c kaapi_test.cpp $XKAAPI_CPPFLAGS # compiling step
$ g++ -o kaapi_test kaapi_test.o $XKAAPI_LDFLAGS # linking step
@end example


@node run
@section Running an Athapascan program


If you have not installed X-Kaapi in a system-wide location, you will need to use
kaapish(1) (or karun(1) to run on several machines, see below) so that environment variables are
correctly defined.

@menu
* single instance:: run program on a single computer
* multiple instance:: run program on cluster
@end menu

@node single instance
@subsection Running a single instance of the program 


You can run the program directly:
@example
$ $HOME/kaapi/bin/kaapish ./atha_test
$ # replace $HOME/kaapi by the prefix used with the configure script
@end example


Or you can update environment variables in your shell to be able to run your
program:
@example
$ eval `$HOME/kaapi/bin/kaapish --shell --mode=run`
$ # replace $HOME/kaapi by the prefix used with the configure script
$ ./kaapi_test
@end example

@strong{NOTE}: in case you already setup an environment to compile X-Kaapi program or
if you installed X-Kaapi in system directories (usually if you use the
@option{--prefix=/usr} with the configure script), you already have a correct
environment to run X-Kaapi programs. So you can run it immediately (the last
line of the previous example)

Of cause, you can use a more featured program, for example @command{fibo_kapixx}
(in this example, no running environment is previously setup, so @command{kaapish} is
used)
@example
$ $HOME/kaapi/bin/kaapish ./fibo_kapixx 30 15
                          #30: the 30-th fibonacci number
                          #15: threshold to stop recursive
@end example

@strong{NOTE}: self documentation of X-Kaapi is displayed by the command line argument
@option{--help}.  All X-Kaapi script or program compiled with X-Kaapi accept this option.

For instance:
@example
$ $HOME/kaapi/bin/kaapish --help
$ $HOME/kaapi/bin/kaapish ./fibo_kaapixx --help
@end example


@node multiple instance
@subsection Running multiple instances of the program on several machines 

To run the same program on several machines, the user may use the @command{karun}
command:

@example
$ $HOME/kaapi/bin/karun --np <#processes> -f <hostnames> ./fibo_apiatha 30 15
@end example

Note that if @command{kaapish} is not in you @env{$PATH} when executing an @command{ssh} on remote
machines (check with @code{ssh <machine> which kaapish}), you will need to specify
it to @command{karun}:
@example
$ $HOME/kaapi/bin/karun --wrapper-binary kaapish=/path/on/remote/node/kaapish \
    --np <#processes> -f <hostnames> ./fibo_apiatha 30 15
@end example

more detail about this command can be found in the man page karun(1)

@strong{NOTE}: if you want to run your programm on a single machine but still want to
use several threads, you can use:
@example
$ $HOME/kaapi/bin/kaapish ./myprog --community -thread.poolsize n my args
                                # n is the number of threads
@end example
