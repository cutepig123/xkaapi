@node hello world
@section Hello World - 1 Fork, 0 Shared

Say hello to your friends !
Understand the @code{a1::Fork} usage.

@table @strong
@item Basics

Each time you want to parallelize a sequential code using Athapascan, you have two things to think of:
@itemize
@item how can I describe the sequential processing in terms of data transformations ( which will be called "tasks" ) ?

@item what are the dependencies between those tasks ? Does one requires the result from another ?
@end itemize

Once you have done this, your mind can begin to relax, your finger will begin to code.

@item Algorithm


@emph{Algorithm} is a bit petty here.
The @emph{hello world} program just displays, for a given value of @var{n}

@example
hello world from 0 !
hello world from 1 !
...
hello world from n-2 !
hello world from n-1 !
@end example

The following @code{C++} code will more or less achieve this goal:

@example
#include <iostream>
int main(int, char **)
@{
  int n = 10; /* number of iteration*/
  for (int id = 0; id < n; id++)
    std::cout << "hello world from " << id << " !" << std::endl;
  return 0;
@}
@end example

@item Where are the tasks


In this @emph{very simple} code, finding the task, the @strong{job to be done}, is rather simple.
What do we want to do ? print a message with a special id (a number).
So the task is the printing of the message, it has no return value, and a single int as input.

@table @strong
@item Task
print_hello
@item input
@code{int} id (read)
@item output
none
@end table


@item Where are the dependencies


Obviously, each task is independent, isn't it ? The engine will automatically deduce this from the fact that each input parameter only has read access.


@item Preparing the code


Now that we know what are the tasks and the dependencies, we need to describe them in a piece of code.
If I follow the Athapascan guide, I read that a task is a function object with void return value. Let's rewrite previous code !

@example
#include <iostream>
/* declare my task as a function object */
struct print_hello
@{
  void operator()( int id )
  @{
    std::cout << "hello world from " << id << " !" << std::endl;
  @}
@};

int main(int, char **)
@{
  int n = 10; /* number of iteration*/
  for (int i = 0; i < n; i++)
    print_hello()(i); /* create and use the function object */
  return 0;
@}
@end example

@strong{NOTE}: we did not create a single instance of the function object and then make several method calls, as we usually do. This is to prepare to the following : each task will be created separately.

@item Using Athapascan

Before going further, we have to prepare the use of KAAPI library. It means we have to do some initialization stuff etc. 

@enumerate
@item Initialize the library
@item Create the main task
@item Clean up
@end enumerate


@example
#include <iostream>
#include <athapascan-1.h> // add athapascan header

struct print_hello
@{
  void operator()( int id )
  @{
    std::cout << "hello world from " << id << " !" << std::endl;
  @}
@};

struct do_main // the do_main is also a task
@{
  void operator()(int argc, char **argv) // copy main here
  @{
    int n = 10; /* number of iteration*/
    for (int i = 0; i < n; i++)
      print_hello()(i); /* create and use the function object */
  @}
@};

int main(int argc, char **argv)
@{
  a1::Community com = a1::System::join_community(argc,argv); // init library
  do_main()(argc,argv); // main call
  com.leave(); // ensure no more task left 
  a1::System::terminate(); // clean up
  return 0;
@}
@end example

@strong{NOTE}: @code{com.leave()} is important, it computes the termination of the program, checking whether the local task list is empty or not.
 

After reading the documentation, I understood that there were some kind of shared variables that were used to compute the dependencies.
I know that I only need to read the content of id, so I'll put it into a @code{a1::Shared_r<int>}

@example
#include <iostream>
#include <athapascan-1.h> 

struct print_hello
@{
  void operator()( a1::Shared_r<int> id ) // use shared read access 
  @{
    // use the read() method to get the content of the shared 
    std::cout << "hello world from " << id.read() << " !" << std::endl;
  @}
@};

struct do_main // the do_main is also a task
@{
  void operator()(int argc, char **argv) // copy main here
  @{
    int n = 10; /* number of iteration*/
    for (int i = 0; i < n; i++)
    @{
      a1::Shared<int> id(i); // put variable in shared memory
      print_hello()(id); 
    @}
  @}
@};

int main(int argc, char **argv)
@{
  a1::Community com = a1::System::join_community(argc,argv);
  do_main()(argc,argv);
  com.leave();
  a1::System::terminate();
  return 0;
@}
@end example

@strong{NOTE}: In fact, the shared memory is not needed here. Passing normal variable as parameters is equivalent to read access for dependencies computing.

I also understood that my tasks were designed to be forked instead of begin called. I must replace my function call by @code{a1::Fork} !

@example
#include <iostream>
#include <athapascan-1.h>

struct print_hello
@{
  void operator()( a1::Shared_r<int> id ) 
  @{
    std::cout << "hello world from " << id.read() << " !" << std::endl;
  @}
@};

struct do_main 
@{
  void operator()(int argc, char **argv) 
  @{
    int n = 10; /* number of iteration*/
    for (int i = 0; i < n; i++)
    @{
      a1::Shared<int> id(i);
      a1::Fork<print_hello>()(id); // fork a new task
    @}
  @}
@};

int main(int argc, char **argv)
@{
  a1::Community com = a1::System::join_community(argc,argv);
  a1::ForkMain<do_main>()(argc,argv); // main fork, only executed by one node 
  com.leave(); 
  a1::System::terminate();
  return 0;
@}
@end example

This is your first piece of athapascan code !

@strong{NOTE}: To compile this code, please have a look to the install and compile documentation (see @ref{compile})!

@strong{NOTE}: To get better performance , the for loop should be written recursively, and a threshold should be used. More on this in next tutorial !
@end table


