/* KAAPI public interface */
// KAAPI library source
// -----------------------------------------
// by Thierry Gautier
//(c) INRIA, projet MOAIS, 2006
//
// **********************************************************
// WARNING! This file has been automatically generated by M4
// Mar 24 nov 2009 16:45:44 CET
// *********************************************************








// --------------------------------------------------------------------
/* 0 is the number of possible parameters */
template<class TASK >
struct KaapiTaskArg0{ 
 
 
  typedef KaapiTaskArg0<TASK > Self_t;
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TASK dummy;
    
//    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy();
  }
};








// --------------------------------------------------------------------
/* 1 is the number of possible parameters */
template<class TASK ,class F1>
struct KaapiTaskArg1{ 
  typedef F1 type_F1;
  
  F1 f1;
  
  typedef KaapiTaskArg1<TASK ,F1> Self_t;
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TASK dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
//    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy(args->f1);
  }
};








// --------------------------------------------------------------------
/* 2 is the number of possible parameters */
template<class TASK ,class F1 ,class F2>
struct KaapiTaskArg2{ 
  typedef F1 type_F1;
  typedef F2 type_F2;
  
  F1 f1;
  F2 f2;
  
  typedef KaapiTaskArg2<TASK ,F1,F2> Self_t;
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TASK dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
//    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy(args->f1, args->f2);
  }
};








// --------------------------------------------------------------------
/* 3 is the number of possible parameters */
template<class TASK ,class F1 ,class F2 ,class F3>
struct KaapiTaskArg3{ 
  typedef F1 type_F1;
  typedef F2 type_F2;
  typedef F3 type_F3;
  
  F1 f1;
  F2 f2;
  F3 f3;
  
  typedef KaapiTaskArg3<TASK ,F1,F2,F3> Self_t;
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TASK dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
//    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy(args->f1, args->f2, args->f3);
  }
};








// --------------------------------------------------------------------
/* 4 is the number of possible parameters */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4>
struct KaapiTaskArg4{ 
  typedef F1 type_F1;
  typedef F2 type_F2;
  typedef F3 type_F3;
  typedef F4 type_F4;
  
  F1 f1;
  F2 f2;
  F3 f3;
  F4 f4;
  
  typedef KaapiTaskArg4<TASK ,F1,F2,F3,F4> Self_t;
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TASK dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
//    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy(args->f1, args->f2, args->f3, args->f4);
  }
};








// --------------------------------------------------------------------
/* 5 is the number of possible parameters */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5>
struct KaapiTaskArg5{ 
  typedef F1 type_F1;
  typedef F2 type_F2;
  typedef F3 type_F3;
  typedef F4 type_F4;
  typedef F5 type_F5;
  
  F1 f1;
  F2 f2;
  F3 f3;
  F4 f4;
  F5 f5;
  
  typedef KaapiTaskArg5<TASK ,F1,F2,F3,F4,F5> Self_t;
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TASK dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
//    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy(args->f1, args->f2, args->f3, args->f4, args->f5);
  }
};








// --------------------------------------------------------------------
/* 6 is the number of possible parameters */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6>
struct KaapiTaskArg6{ 
  typedef F1 type_F1;
  typedef F2 type_F2;
  typedef F3 type_F3;
  typedef F4 type_F4;
  typedef F5 type_F5;
  typedef F6 type_F6;
  
  F1 f1;
  F2 f2;
  F3 f3;
  F4 f4;
  F5 f5;
  F6 f6;
  
  typedef KaapiTaskArg6<TASK ,F1,F2,F3,F4,F5,F6> Self_t;
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TASK dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
//    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy(args->f1, args->f2, args->f3, args->f4, args->f5, args->f6);
  }
};








// --------------------------------------------------------------------
/* 7 is the number of possible parameters */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7>
struct KaapiTaskArg7{ 
  typedef F1 type_F1;
  typedef F2 type_F2;
  typedef F3 type_F3;
  typedef F4 type_F4;
  typedef F5 type_F5;
  typedef F6 type_F6;
  typedef F7 type_F7;
  
  F1 f1;
  F2 f2;
  F3 f3;
  F4 f4;
  F5 f5;
  F6 f6;
  F7 f7;
  
  typedef KaapiTaskArg7<TASK ,F1,F2,F3,F4,F5,F6,F7> Self_t;
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TASK dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
//    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy(args->f1, args->f2, args->f3, args->f4, args->f5, args->f6, args->f7);
  }
};








// --------------------------------------------------------------------
/* 8 is the number of possible parameters */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8>
struct KaapiTaskArg8{ 
  typedef F1 type_F1;
  typedef F2 type_F2;
  typedef F3 type_F3;
  typedef F4 type_F4;
  typedef F5 type_F5;
  typedef F6 type_F6;
  typedef F7 type_F7;
  typedef F8 type_F8;
  
  F1 f1;
  F2 f2;
  F3 f3;
  F4 f4;
  F5 f5;
  F6 f6;
  F7 f7;
  F8 f8;
  
  typedef KaapiTaskArg8<TASK ,F1,F2,F3,F4,F5,F6,F7,F8> Self_t;
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TASK dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
//    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy(args->f1, args->f2, args->f3, args->f4, args->f5, args->f6, args->f7, args->f8);
  }
};








// --------------------------------------------------------------------
/* 9 is the number of possible parameters */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9>
struct KaapiTaskArg9{ 
  typedef F1 type_F1;
  typedef F2 type_F2;
  typedef F3 type_F3;
  typedef F4 type_F4;
  typedef F5 type_F5;
  typedef F6 type_F6;
  typedef F7 type_F7;
  typedef F8 type_F8;
  typedef F9 type_F9;
  
  F1 f1;
  F2 f2;
  F3 f3;
  F4 f4;
  F5 f5;
  F6 f6;
  F7 f7;
  F8 f8;
  F9 f9;
  
  typedef KaapiTaskArg9<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9> Self_t;
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TASK dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
//    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy(args->f1, args->f2, args->f3, args->f4, args->f5, args->f6, args->f7, args->f8, args->f9);
  }
};








// --------------------------------------------------------------------
/* 10 is the number of possible parameters */
template<class TASK ,class F1 ,class F2 ,class F3 ,class F4 ,class F5 ,class F6 ,class F7 ,class F8 ,class F9 ,class F10>
struct KaapiTaskArg10{ 
  typedef F1 type_F1;
  typedef F2 type_F2;
  typedef F3 type_F3;
  typedef F4 type_F4;
  typedef F5 type_F5;
  typedef F6 type_F6;
  typedef F7 type_F7;
  typedef F8 type_F8;
  typedef F9 type_F9;
  typedef F10 type_F10;
  
  F1 f1;
  F2 f2;
  F3 f3;
  F4 f4;
  F5 f5;
  F6 f6;
  F7 f7;
  F8 f8;
  F9 f9;
  F10 f10;
  
  typedef KaapiTaskArg10<TASK ,F1,F2,F3,F4,F5,F6,F7,F8,F9,F10> Self_t;
  static void body(kaapi_task_t* t, kaapi_stack_t* stack)
  {
    static TASK dummy;
    Self_t* args = kaapi_task_getargst(t, Self_t);
//    Self_t* args = kaapi_task_getargst(t, Self_t);
    dummy(args->f1, args->f2, args->f3, args->f4, args->f5, args->f6, args->f7, args->f8, args->f9, args->f10);
  }
};
